{
  "address": "0xD832462B1bE2b0c600CC87b734E630408736E875",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[6]",
          "name": "stats",
          "type": "uint256[6]"
        }
      ],
      "name": "calculateHealth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[6]",
          "name": "stats",
          "type": "uint256[6]"
        },
        {
          "internalType": "uint256[7]",
          "name": "attributes",
          "type": "uint256[7]"
        }
      ],
      "name": "calculateMagicCritChance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[6]",
          "name": "stats",
          "type": "uint256[6]"
        },
        {
          "internalType": "uint256[7]",
          "name": "attributes",
          "type": "uint256[7]"
        }
      ],
      "name": "calculateMagicDamage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[6]",
          "name": "stats",
          "type": "uint256[6]"
        }
      ],
      "name": "calculateMagicDefense",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[6]",
          "name": "stats",
          "type": "uint256[6]"
        },
        {
          "internalType": "uint256[7]",
          "name": "attributes",
          "type": "uint256[7]"
        }
      ],
      "name": "calculatePhysicalCritChance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[6]",
          "name": "stats",
          "type": "uint256[6]"
        },
        {
          "internalType": "uint256[7]",
          "name": "attributes",
          "type": "uint256[7]"
        }
      ],
      "name": "calculatePhysicalDamage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[6]",
          "name": "stats",
          "type": "uint256[6]"
        }
      ],
      "name": "calculatePhysicalDefense",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x2bc8de8538042d49330220df2f2973c7c87be791b604b71526d4772c52c575b6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xD832462B1bE2b0c600CC87b734E630408736E875",
    "transactionIndex": 0,
    "gasUsed": "1295786",
    "logsBloom": "0x
    "blockHash": "0x2094fb1312af1041e39e8d7afe442a0f099a177c4c9d32391a3387872831c785",
    "transactionHash": "0x2bc8de8538042d49330220df2f2973c7c87be791b604b71526d4772c52c575b6",
    "logs": [],
    "blockNumber": 8232251,
    "cumulativeGasUsed": "1295786",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0e3068ca49787a845c92576008b22d6c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"stats\",\"type\":\"uint256[6]\"}],\"name\":\"calculateHealth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"stats\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256[7]\",\"name\":\"attributes\",\"type\":\"uint256[7]\"}],\"name\":\"calculateMagicCritChance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"stats\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256[7]\",\"name\":\"attributes\",\"type\":\"uint256[7]\"}],\"name\":\"calculateMagicDamage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"stats\",\"type\":\"uint256[6]\"}],\"name\":\"calculateMagicDefense\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"stats\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256[7]\",\"name\":\"attributes\",\"type\":\"uint256[7]\"}],\"name\":\"calculatePhysicalCritChance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"stats\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256[7]\",\"name\":\"attributes\",\"type\":\"uint256[7]\"}],\"name\":\"calculatePhysicalDamage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"stats\",\"type\":\"uint256[6]\"}],\"name\":\"calculatePhysicalDefense\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/Stats.sol\":\"StatsLibrary\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/Class.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\nimport {StatsLibrary} from \\\"./Stats.sol\\\";\\n\\nlibrary ClassLibrary {\\n    enum PrimaryClass {\\n        Warrior,\\n        Mage,\\n        Rogue,\\n        Guardian,\\n        Enchanter,\\n        None\\n    }\\n\\n    enum SecondaryClass {\\n        Reaper,\\n        Duelist,\\n        Harlequin,\\n        Arcanist,\\n        Battlemage,\\n        Dreamweaver,\\n        Stalker,\\n        Trickster,\\n        Explorer,\\n        Titan,\\n        Spellbreaker,\\n        Hexer,\\n        Voidwalker,\\n        Prophet,\\n        None\\n    }\\n\\n    function getOptions(\\n        PrimaryClass primary\\n    ) public pure returns (uint256[3] memory) {\\n        uint256[3][5] memory options = [\\n            [\\n                uint256(SecondaryClass.Reaper),\\n                uint256(SecondaryClass.Duelist),\\n                uint256(SecondaryClass.Harlequin)\\n            ],\\n            [\\n                uint256(SecondaryClass.Arcanist),\\n                uint256(SecondaryClass.Battlemage),\\n                uint256(SecondaryClass.Dreamweaver)\\n            ],\\n            [\\n                uint256(SecondaryClass.Stalker),\\n                uint256(SecondaryClass.Trickster),\\n                uint256(SecondaryClass.Explorer)\\n            ],\\n            [\\n                uint256(SecondaryClass.Titan),\\n                uint256(SecondaryClass.Spellbreaker),\\n                uint256(SecondaryClass.None)\\n            ],\\n            [\\n                uint256(SecondaryClass.Hexer),\\n                uint256(SecondaryClass.Voidwalker),\\n                uint256(SecondaryClass.Prophet)\\n            ]\\n        ];\\n\\n        return options[uint256(primary)];\\n    }\\n\\n    function getMarkers(\\n        PrimaryClass primary,\\n        SecondaryClass secondary\\n    ) public pure returns (StatsLibrary.Stats[2] memory) {\\n        if (primary == PrimaryClass.None) {\\n            return [StatsLibrary.Stats.VOID, StatsLibrary.Stats.VOID];\\n        }\\n\\n        StatsLibrary.Stats[5] memory primaryMarkers;\\n        primaryMarkers[uint256(PrimaryClass.Warrior)] = StatsLibrary\\n            .Stats\\n            .STRENGTH;\\n        primaryMarkers[uint256(PrimaryClass.Mage)] = StatsLibrary\\n            .Stats\\n            .INTELLECT;\\n        primaryMarkers[uint256(PrimaryClass.Rogue)] = StatsLibrary\\n            .Stats\\n            .DEXTERTY;\\n        primaryMarkers[uint256(PrimaryClass.Guardian)] = StatsLibrary\\n            .Stats\\n            .CONSTITUTION;\\n        primaryMarkers[uint256(PrimaryClass.Enchanter)] = StatsLibrary\\n            .Stats\\n            .WIT;\\n\\n        if (secondary == SecondaryClass.None) {\\n            return [primaryMarkers[uint256(primary)], StatsLibrary.Stats.VOID];\\n        }\\n\\n        StatsLibrary.Stats[14] memory secondaryMarkers;\\n\\n        // Warrior\\n        secondaryMarkers[uint256(SecondaryClass.Reaper)] = StatsLibrary\\n            .Stats\\n            .DEXTERTY;\\n        secondaryMarkers[uint256(SecondaryClass.Duelist)] = StatsLibrary\\n            .Stats\\n            .CONSTITUTION;\\n        secondaryMarkers[uint256(SecondaryClass.Harlequin)] = StatsLibrary\\n            .Stats\\n            .LUCK;\\n\\n        // Mage\\n        secondaryMarkers[uint256(SecondaryClass.Arcanist)] = StatsLibrary\\n            .Stats\\n            .WIT;\\n        secondaryMarkers[uint256(SecondaryClass.Battlemage)] = StatsLibrary\\n            .Stats\\n            .CONSTITUTION;\\n        secondaryMarkers[uint256(SecondaryClass.Dreamweaver)] = StatsLibrary\\n            .Stats\\n            .LUCK;\\n\\n        // Rogue\\n        secondaryMarkers[uint256(SecondaryClass.Stalker)] = StatsLibrary\\n            .Stats\\n            .STRENGTH;\\n        secondaryMarkers[uint256(SecondaryClass.Trickster)] = StatsLibrary\\n            .Stats\\n            .WIT;\\n        secondaryMarkers[uint256(SecondaryClass.Explorer)] = StatsLibrary\\n            .Stats\\n            .LUCK;\\n\\n        // Guardian\\n        secondaryMarkers[uint256(SecondaryClass.Titan)] = StatsLibrary\\n            .Stats\\n            .STRENGTH;\\n        secondaryMarkers[uint256(SecondaryClass.Spellbreaker)] = StatsLibrary\\n            .Stats\\n            .INTELLECT;\\n\\n        // Enchanter\\n        secondaryMarkers[uint256(SecondaryClass.Hexer)] = StatsLibrary\\n            .Stats\\n            .STRENGTH;\\n        secondaryMarkers[uint256(SecondaryClass.Voidwalker)] = StatsLibrary\\n            .Stats\\n            .INTELLECT;\\n        secondaryMarkers[uint256(SecondaryClass.Prophet)] = StatsLibrary\\n            .Stats\\n            .LUCK;\\n\\n        return [\\n            primaryMarkers[uint256(primary)],\\n            secondaryMarkers[uint256(secondary)]\\n        ];\\n    }\\n}\\n\",\"keccak256\":\"0x59a54841a5d7b05a9c363d87224d846e7df7eda6ca60174f7952e3df372dff45\",\"license\":\"MIT\"},\"contracts/libraries/Stats.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity ^0.8.16;\\nimport {ClassLibrary} from \\\"./Class.sol\\\";\\n\\nlibrary StatsLibrary {\\n    enum Stats {\\n        STRENGTH,\\n        DEXTERTY,\\n        CONSTITUTION,\\n        INTELLECT,\\n        WIT,\\n        LUCK,\\n        VOID\\n    }\\n\\n    struct Location {\\n        uint256 x;\\n        uint256 y;\\n    }\\n\\n    struct Attributes {\\n        uint256 level;\\n        uint256 experience;\\n        ClassLibrary.PrimaryClass primaryClass;\\n        ClassLibrary.SecondaryClass secondaryClass;\\n        Location location;\\n        uint256 speed;\\n    }\\n\\n    function calculateXPForNextLevel(\\n        uint256 currentLevel\\n    ) internal pure returns (uint256) {\\n        uint256 nextLevel = currentLevel + 1;\\n        return nextLevel ** 2 * 3 + 100;\\n    }\\n\\n    function calculateHealth(\\n        uint256[6] calldata stats\\n    ) public pure returns (uint256) {\\n        uint256 strength = stats[uint256(Stats.STRENGTH)];\\n        uint256 dexterity = stats[uint256(Stats.DEXTERTY)];\\n        uint256 constitution = stats[uint256(Stats.CONSTITUTION)];\\n        uint256 intellect = stats[uint256(Stats.INTELLECT)];\\n        uint256 wit = stats[uint256(Stats.WIT)];\\n        uint256 luck = stats[uint256(Stats.LUCK)];\\n\\n        return\\n            strength *\\n            8 +\\n            dexterity *\\n            8 +\\n            constitution *\\n            20 +\\n            intellect *\\n            6 +\\n            wit *\\n            6 +\\n            luck *\\n            4;\\n    }\\n\\n    function calculatePhysicalDamage(\\n        uint256[6] calldata stats,\\n        Attributes memory attributes\\n    ) internal pure returns (uint256) {\\n        Stats[2] memory markers = ClassLibrary.getMarkers(\\n            attributes.primaryClass,\\n            attributes.secondaryClass\\n        );\\n\\n        uint256 primaryStatValue = stats[uint256(markers[0])];\\n        uint256 secondaryStatValue = stats[uint256(markers[1])];\\n\\n        uint256 strength = stats[uint256(Stats.STRENGTH)];\\n        uint256 dexterity = stats[uint256(Stats.DEXTERTY)];\\n\\n        return\\n            strength *\\n            10 +\\n            dexterity *\\n            8 +\\n            primaryStatValue *\\n            4 +\\n            secondaryStatValue *\\n            2;\\n    }\\n\\n    function calculatePhysicalDamage(\\n        uint256[6] calldata stats,\\n        uint[7] calldata attributes\\n    ) external pure returns (uint256) {\\n        Attributes memory attributesStruct = attributesArrToStruct(attributes);\\n\\n        return calculatePhysicalDamage(stats, attributesStruct);\\n    }\\n\\n    function calculateMagicDamage(\\n        uint256[6] calldata stats,\\n        Attributes memory attributes\\n    ) internal pure returns (uint256) {\\n        Stats[2] memory markers = ClassLibrary.getMarkers(\\n            attributes.primaryClass,\\n            attributes.secondaryClass\\n        );\\n\\n        uint256 primaryStatValue = stats[uint256(markers[0])];\\n        uint256 secondaryStatValue = stats[uint256(markers[1])];\\n\\n        uint256 intellect = stats[uint256(Stats.INTELLECT)];\\n        uint256 wit = stats[uint256(Stats.WIT)];\\n\\n        return\\n            intellect *\\n            10 +\\n            wit *\\n            8 +\\n            primaryStatValue *\\n            4 +\\n            secondaryStatValue *\\n            2;\\n    }\\n\\n    function calculateMagicDamage(\\n        uint256[6] calldata stats,\\n        uint[7] calldata attributes\\n    ) external pure returns (uint256) {\\n        Attributes memory attributesStruct = attributesArrToStruct(attributes);\\n\\n        return calculateMagicDamage(stats, attributesStruct);\\n    }\\n\\n    function calculatePhysicalDefense(\\n        uint256[6] calldata stats\\n    ) public pure returns (uint256) {\\n        uint256 strength = stats[uint256(Stats.STRENGTH)];\\n        uint256 constitution = stats[uint256(Stats.CONSTITUTION)];\\n        uint256 dexterity = stats[uint256(Stats.DEXTERTY)];\\n\\n        return constitution * 8 + strength * 6 + dexterity * 4;\\n    }\\n\\n    function calculateMagicDefense(\\n        uint256[6] calldata stats\\n    ) public pure returns (uint256) {\\n        uint256 constitution = stats[uint256(Stats.CONSTITUTION)];\\n        uint256 intellect = stats[uint256(Stats.INTELLECT)];\\n        uint256 wit = stats[uint256(Stats.WIT)];\\n\\n        return intellect * 8 + wit * 6 + constitution * 4;\\n    }\\n\\n    function calculatePhysicalCritChance(\\n        uint256[6] calldata stats,\\n        Attributes memory attributes\\n    ) internal pure returns (uint256) {\\n        Stats[2] memory markers = ClassLibrary.getMarkers(\\n            attributes.primaryClass,\\n            attributes.secondaryClass\\n        );\\n\\n        uint256 dexComponent = markers[0] == Stats.DEXTERTY\\n            ? 20\\n            : markers[1] == Stats.DEXTERTY\\n            ? 10\\n            : 5;\\n        uint256 luckComponent = markers[1] == Stats.LUCK ? 25 : 10;\\n\\n        uint256 maxCritChance = dexComponent + luckComponent;\\n\\n        uint256 dexBonus = markers[0] == Stats.DEXTERTY\\n            ? 5\\n            : markers[1] == Stats.DEXTERTY\\n            ? 3\\n            : 0;\\n        uint256 luckBonus = markers[1] == Stats.LUCK ? 7 : 0;\\n\\n        uint256 dexterity = stats[uint256(Stats.DEXTERTY)];\\n        uint256 luck = stats[uint256(Stats.LUCK)];\\n\\n        uint256 critChance = (luck / 4 + dexterity / 8) + luckBonus + dexBonus;\\n\\n        return critChance > maxCritChance ? maxCritChance : critChance;\\n    }\\n\\n    function calculatePhysicalCritChance(\\n        uint256[6] calldata stats,\\n        uint[7] calldata attributes\\n    ) public pure returns (uint256) {\\n        Attributes memory attributesStruct = attributesArrToStruct(attributes);\\n\\n        return calculatePhysicalCritChance(stats, attributesStruct);\\n    }\\n\\n    function calculateMagicCritChance(\\n        uint256[6] calldata stats,\\n        Attributes memory attributes\\n    ) internal pure returns (uint256) {\\n        Stats[2] memory markers = ClassLibrary.getMarkers(\\n            attributes.primaryClass,\\n            attributes.secondaryClass\\n        );\\n\\n        uint256 witComponent = markers[0] == Stats.WIT\\n            ? 20\\n            : markers[1] == Stats.WIT\\n            ? 10\\n            : 5;\\n        uint256 luckComponent = markers[1] == Stats.LUCK ? 25 : 10;\\n\\n        uint256 maxCritChance = witComponent + luckComponent;\\n        uint256 witBonus = markers[0] == Stats.WIT ? 5 : markers[1] == Stats.WIT\\n            ? 3\\n            : 0;\\n        uint256 luckBonus = markers[1] == Stats.LUCK ? 7 : 0;\\n\\n        uint256 wit = stats[uint256(Stats.WIT)];\\n        uint256 luck = stats[uint256(Stats.LUCK)];\\n\\n        uint256 critChance = (luck / 4 + wit / 8) + luckBonus + witBonus;\\n\\n        return critChance > maxCritChance ? maxCritChance : critChance;\\n    }\\n\\n    function calculateMagicCritChance(\\n        uint256[6] calldata stats,\\n        uint[7] calldata attributes\\n    ) public pure returns (uint256) {\\n        Attributes memory attributesStruct = attributesArrToStruct(attributes);\\n\\n        return calculateMagicCritChance(stats, attributesStruct);\\n    }\\n\\n    function attributesArrToStruct(\\n        uint[7] calldata attributes\\n    ) internal pure returns (Attributes memory) {\\n        Location memory location = Location(attributes[4], attributes[5]);\\n\\n        return\\n            Attributes(\\n                attributes[0],\\n                attributes[1],\\n                ClassLibrary.PrimaryClass(attributes[2]),\\n                ClassLibrary.SecondaryClass(attributes[3]),\\n                location,\\n                attributes[6]\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xd1ac68040c33bd0a870f0df6f3d896c20bc5c12bde833e7e0f975c2871d4aab1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x611680610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100875760003560e01c80633fd78fa4116100655780633fd78fa41461011c57806361a6d61e1461014c578063c2de343a1461017c578063f003f50b146101ac57610087565b806329bf21741461008c5780632dff70ec146100bc5780633d91dffa146100ec575b600080fd5b6100a660048036038101906100a191906111e0565b6101dc565b6040516100b3919061123a565b60405180910390f35b6100d660048036038101906100d191906111e0565b6101fd565b6040516100e3919061123a565b60405180910390f35b61010660048036038101906101019190611255565b61021e565b604051610113919061123a565b60405180910390f35b61013660048036038101906101319190611255565b6102f1565b604051610143919061123a565b60405180910390f35b610166600480360381019061016191906111e0565b610499565b604051610173919061123a565b60405180910390f35b61019660048036038101906101919190611255565b6104ba565b6040516101a3919061123a565b60405180910390f35b6101c660048036038101906101c191906111e0565b61058d565b6040516101d3919061123a565b60405180910390f35b6000806101e8836105ae565b90506101f484826106f4565b91505092915050565b600080610209836105ae565b90506102158482610a32565b91505092915050565b600080826002600681111561023657610235611282565b5b60068110610247576102466112b1565b5b602002013590506000836003600681111561026557610264611282565b5b60068110610276576102756112b1565b5b602002013590506000846004600681111561029457610293611282565b5b600681106102a5576102a46112b1565b5b602002013590506004836102b9919061130f565b6006826102c6919061130f565b6008846102d3919061130f565b6102dd9190611369565b6102e79190611369565b9350505050919050565b600080826000600681111561030957610308611282565b5b6006811061031a576103196112b1565b5b602002013590506000836001600681111561033857610337611282565b5b60068110610349576103486112b1565b5b602002013590506000846002600681111561036757610366611282565b5b60068110610378576103776112b1565b5b602002013590506000856003600681111561039657610395611282565b5b600681106103a7576103a66112b1565b5b60200201359050600086600460068111156103c5576103c4611282565b5b600681106103d6576103d56112b1565b5b60200201359050600087600560068111156103f4576103f3611282565b5b60068110610405576104046112b1565b5b60200201359050600481610419919061130f565b600683610426919061130f565b600685610433919061130f565b601487610440919061130f565b60088961044d919061130f565b60088b61045a919061130f565b6104649190611369565b61046e9190611369565b6104789190611369565b6104829190611369565b61048c9190611369565b9650505050505050919050565b6000806104a5836105ae565b90506104b18482610c01565b91505092915050565b60008082600060068111156104d2576104d1611282565b5b600681106104e3576104e26112b1565b5b602002013590506000836002600681111561050157610500611282565b5b60068110610512576105116112b1565b5b60200201359050600084600160068111156105305761052f611282565b5b60068110610541576105406112b1565b5b60200201359050600481610555919061130f565b600684610562919061130f565b60088461056f919061130f565b6105799190611369565b6105839190611369565b9350505050919050565b600080610599836105ae565b90506105a58482610dd0565b91505092915050565b6105b661110e565b60006040518060400160405280846004600781106105d7576105d66112b1565b5b60200201358152602001846005600781106105f5576105f46112b1565b5b602002013581525090506040518060c001604052808460006007811061061e5761061d6112b1565b5b602002013581526020018460016007811061063c5761063b6112b1565b5b602002013581526020018460026007811061065a576106596112b1565b5b6020020135600581111561067157610670611282565b5b600581111561068357610682611282565b5b81526020018460036007811061069c5761069b6112b1565b5b6020020135600e8111156106b3576106b2611282565b5b600e8111156106c5576106c4611282565b5b8152602001828152602001846006600781106106e4576106e36112b1565b5b6020020135815250915050919050565b60008073F60be104fB98bDC81E3B0B9525C715a041f60c9163fa5ab32e846040015185606001516040518363ffffffff1660e01b815260040161073892919061142d565b6040805180830381865af4158015610754573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077891906115bd565b90506000600460068111156107905761078f611282565b5b826000600281106107a4576107a36112b1565b5b602002015160068111156107bb576107ba611282565b5b1461081357600460068111156107d4576107d3611282565b5b826001600281106107e8576107e76112b1565b5b602002015160068111156107ff576107fe611282565b5b1461080b57600561080e565b600a5b610816565b60145b60ff16905060006005600681111561083157610830611282565b5b83600160028110610845576108446112b1565b5b6020020151600681111561085c5761085b611282565b5b1461086857600a61086b565b60195b60ff1690506000818361087e9190611369565b905060006004600681111561089657610895611282565b5b856000600281106108aa576108a96112b1565b5b602002015160068111156108c1576108c0611282565b5b1461091957600460068111156108da576108d9611282565b5b856001600281106108ee576108ed6112b1565b5b6020020151600681111561090557610904611282565b5b14610911576000610914565b60035b61091c565b60055b60ff16905060006005600681111561093757610936611282565b5b8660016002811061094b5761094a6112b1565b5b6020020151600681111561096257610961611282565b5b1461096e576000610971565b60075b60ff1690506000896004600681111561098d5761098c611282565b5b6006811061099e5761099d6112b1565b5b6020020135905060008a600560068111156109bc576109bb611282565b5b600681106109cd576109cc6112b1565b5b60200201359050600084846008856109e59190611619565b6004856109f29190611619565b6109fc9190611369565b610a069190611369565b610a109190611369565b9050858111610a1f5780610a21565b855b995050505050505050505092915050565b60008073F60be104fB98bDC81E3B0B9525C715a041f60c9163fa5ab32e846040015185606001516040518363ffffffff1660e01b8152600401610a7692919061142d565b6040805180830381865af4158015610a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab691906115bd565b905060008482600060028110610acf57610ace6112b1565b5b60200201516006811115610ae657610ae5611282565b5b60068110610af757610af66112b1565b5b6020020135905060008583600160028110610b1557610b146112b1565b5b60200201516006811115610b2c57610b2b611282565b5b60068110610b3d57610b3c6112b1565b5b6020020135905060008660036006811115610b5b57610b5a611282565b5b60068110610b6c57610b6b6112b1565b5b6020020135905060008760046006811115610b8a57610b89611282565b5b60068110610b9b57610b9a6112b1565b5b60200201359050600283610baf919061130f565b600485610bbc919061130f565b600883610bc9919061130f565b600a85610bd6919061130f565b610be09190611369565b610bea9190611369565b610bf49190611369565b9550505050505092915050565b60008073F60be104fB98bDC81E3B0B9525C715a041f60c9163fa5ab32e846040015185606001516040518363ffffffff1660e01b8152600401610c4592919061142d565b6040805180830381865af4158015610c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8591906115bd565b905060008482600060028110610c9e57610c9d6112b1565b5b60200201516006811115610cb557610cb4611282565b5b60068110610cc657610cc56112b1565b5b6020020135905060008583600160028110610ce457610ce36112b1565b5b60200201516006811115610cfb57610cfa611282565b5b60068110610d0c57610d0b6112b1565b5b6020020135905060008660006006811115610d2a57610d29611282565b5b60068110610d3b57610d3a6112b1565b5b6020020135905060008760016006811115610d5957610d58611282565b5b60068110610d6a57610d696112b1565b5b60200201359050600283610d7e919061130f565b600485610d8b919061130f565b600883610d98919061130f565b600a85610da5919061130f565b610daf9190611369565b610db99190611369565b610dc39190611369565b9550505050505092915050565b60008073F60be104fB98bDC81E3B0B9525C715a041f60c9163fa5ab32e846040015185606001516040518363ffffffff1660e01b8152600401610e1492919061142d565b6040805180830381865af4158015610e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5491906115bd565b9050600060016006811115610e6c57610e6b611282565b5b82600060028110610e8057610e7f6112b1565b5b60200201516006811115610e9757610e96611282565b5b14610eef5760016006811115610eb057610eaf611282565b5b82600160028110610ec457610ec36112b1565b5b60200201516006811115610edb57610eda611282565b5b14610ee7576005610eea565b600a5b610ef2565b60145b60ff169050600060056006811115610f0d57610f0c611282565b5b83600160028110610f2157610f206112b1565b5b60200201516006811115610f3857610f37611282565b5b14610f4457600a610f47565b60195b60ff16905060008183610f5a9190611369565b9050600060016006811115610f7257610f71611282565b5b85600060028110610f8657610f856112b1565b5b60200201516006811115610f9d57610f9c611282565b5b14610ff55760016006811115610fb657610fb5611282565b5b85600160028110610fca57610fc96112b1565b5b60200201516006811115610fe157610fe0611282565b5b14610fed576000610ff0565b60035b610ff8565b60055b60ff16905060006005600681111561101357611012611282565b5b86600160028110611027576110266112b1565b5b6020020151600681111561103e5761103d611282565b5b1461104a57600061104d565b60075b60ff1690506000896001600681111561106957611068611282565b5b6006811061107a576110796112b1565b5b6020020135905060008a6005600681111561109857611097611282565b5b600681106110a9576110a86112b1565b5b60200201359050600084846008856110c19190611619565b6004856110ce9190611619565b6110d89190611369565b6110e29190611369565b6110ec9190611369565b90508581116110fb57806110fd565b855b995050505050505050505092915050565b6040518060c0016040528060008152602001600081526020016000600581111561113b5761113a611282565b5b81526020016000600e81111561115457611153611282565b5b815260200161116161116e565b8152602001600081525090565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050826020600602820111156111b8576111b7611197565b5b92915050565b6000819050826020600702820111156111da576111d9611197565b5b92915050565b6000806101a083850312156111f8576111f7611192565b5b60006112068582860161119c565b92505060c0611217858286016111be565b9150509250929050565b6000819050919050565b61123481611221565b82525050565b600060208201905061124f600083018461122b565b92915050565b600060c0828403121561126b5761126a611192565b5b60006112798482850161119c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061131a82611221565b915061132583611221565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561135e5761135d6112e0565b5b828202905092915050565b600061137482611221565b915061137f83611221565b9250828201905080821115611397576113966112e0565b5b92915050565b600681106113ae576113ad611282565b5b50565b60008190506113bf8261139d565b919050565b60006113cf826113b1565b9050919050565b6113df816113c4565b82525050565b600f81106113f6576113f5611282565b5b50565b6000819050611407826113e5565b919050565b6000611417826113f9565b9050919050565b6114278161140c565b82525050565b600060408201905061144260008301856113d6565b61144f602083018461141e565b9392505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6114a48261145b565b810181811067ffffffffffffffff821117156114c3576114c261146c565b5b80604052505050565b60006114d6611188565b90506114e2828261149b565b919050565b600067ffffffffffffffff8211156115025761150161146c565b5b602082029050919050565b6007811061151a57600080fd5b50565b60008151905061152c8161150d565b92915050565b6000611545611540846114e7565b6114cc565b9050806020840283018581111561155f5761155e611197565b5b835b818110156115885780611574888261151d565b845260208401935050602081019050611561565b5050509392505050565b600082601f8301126115a7576115a6611456565b5b60026115b4848285611532565b91505092915050565b6000604082840312156115d3576115d2611192565b5b60006115e184828501611592565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061162482611221565b915061162f83611221565b92508261163f5761163e6115ea565b5b82820490509291505056fea264697066735822122029d0e6f402b89853b2659c125e93f7b8a9b1c3c6ad4a574d8c2e4ea20212953164736f6c63430008100033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100875760003560e01c80633fd78fa4116100655780633fd78fa41461011c57806361a6d61e1461014c578063c2de343a1461017c578063f003f50b146101ac57610087565b806329bf21741461008c5780632dff70ec146100bc5780633d91dffa146100ec575b600080fd5b6100a660048036038101906100a191906111e0565b6101dc565b6040516100b3919061123a565b60405180910390f35b6100d660048036038101906100d191906111e0565b6101fd565b6040516100e3919061123a565b60405180910390f35b61010660048036038101906101019190611255565b61021e565b604051610113919061123a565b60405180910390f35b61013660048036038101906101319190611255565b6102f1565b604051610143919061123a565b60405180910390f35b610166600480360381019061016191906111e0565b610499565b604051610173919061123a565b60405180910390f35b61019660048036038101906101919190611255565b6104ba565b6040516101a3919061123a565b60405180910390f35b6101c660048036038101906101c191906111e0565b61058d565b6040516101d3919061123a565b60405180910390f35b6000806101e8836105ae565b90506101f484826106f4565b91505092915050565b600080610209836105ae565b90506102158482610a32565b91505092915050565b600080826002600681111561023657610235611282565b5b60068110610247576102466112b1565b5b602002013590506000836003600681111561026557610264611282565b5b60068110610276576102756112b1565b5b602002013590506000846004600681111561029457610293611282565b5b600681106102a5576102a46112b1565b5b602002013590506004836102b9919061130f565b6006826102c6919061130f565b6008846102d3919061130f565b6102dd9190611369565b6102e79190611369565b9350505050919050565b600080826000600681111561030957610308611282565b5b6006811061031a576103196112b1565b5b602002013590506000836001600681111561033857610337611282565b5b60068110610349576103486112b1565b5b602002013590506000846002600681111561036757610366611282565b5b60068110610378576103776112b1565b5b602002013590506000856003600681111561039657610395611282565b5b600681106103a7576103a66112b1565b5b60200201359050600086600460068111156103c5576103c4611282565b5b600681106103d6576103d56112b1565b5b60200201359050600087600560068111156103f4576103f3611282565b5b60068110610405576104046112b1565b5b60200201359050600481610419919061130f565b600683610426919061130f565b600685610433919061130f565b601487610440919061130f565b60088961044d919061130f565b60088b61045a919061130f565b6104649190611369565b61046e9190611369565b6104789190611369565b6104829190611369565b61048c9190611369565b9650505050505050919050565b6000806104a5836105ae565b90506104b18482610c01565b91505092915050565b60008082600060068111156104d2576104d1611282565b5b600681106104e3576104e26112b1565b5b602002013590506000836002600681111561050157610500611282565b5b60068110610512576105116112b1565b5b60200201359050600084600160068111156105305761052f611282565b5b60068110610541576105406112b1565b5b60200201359050600481610555919061130f565b600684610562919061130f565b60088461056f919061130f565b6105799190611369565b6105839190611369565b9350505050919050565b600080610599836105ae565b90506105a58482610dd0565b91505092915050565b6105b661110e565b60006040518060400160405280846004600781106105d7576105d66112b1565b5b60200201358152602001846005600781106105f5576105f46112b1565b5b602002013581525090506040518060c001604052808460006007811061061e5761061d6112b1565b5b602002013581526020018460016007811061063c5761063b6112b1565b5b602002013581526020018460026007811061065a576106596112b1565b5b6020020135600581111561067157610670611282565b5b600581111561068357610682611282565b5b81526020018460036007811061069c5761069b6112b1565b5b6020020135600e8111156106b3576106b2611282565b5b600e8111156106c5576106c4611282565b5b8152602001828152602001846006600781106106e4576106e36112b1565b5b6020020135815250915050919050565b60008073__$a2c259faa3a71ee8e08279c7fdb63b5567$__63fa5ab32e846040015185606001516040518363ffffffff1660e01b815260040161073892919061142d565b6040805180830381865af4158015610754573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077891906115bd565b90506000600460068111156107905761078f611282565b5b826000600281106107a4576107a36112b1565b5b602002015160068111156107bb576107ba611282565b5b1461081357600460068111156107d4576107d3611282565b5b826001600281106107e8576107e76112b1565b5b602002015160068111156107ff576107fe611282565b5b1461080b57600561080e565b600a5b610816565b60145b60ff16905060006005600681111561083157610830611282565b5b83600160028110610845576108446112b1565b5b6020020151600681111561085c5761085b611282565b5b1461086857600a61086b565b60195b60ff1690506000818361087e9190611369565b905060006004600681111561089657610895611282565b5b856000600281106108aa576108a96112b1565b5b602002015160068111156108c1576108c0611282565b5b1461091957600460068111156108da576108d9611282565b5b856001600281106108ee576108ed6112b1565b5b6020020151600681111561090557610904611282565b5b14610911576000610914565b60035b61091c565b60055b60ff16905060006005600681111561093757610936611282565b5b8660016002811061094b5761094a6112b1565b5b6020020151600681111561096257610961611282565b5b1461096e576000610971565b60075b60ff1690506000896004600681111561098d5761098c611282565b5b6006811061099e5761099d6112b1565b5b6020020135905060008a600560068111156109bc576109bb611282565b5b600681106109cd576109cc6112b1565b5b60200201359050600084846008856109e59190611619565b6004856109f29190611619565b6109fc9190611369565b610a069190611369565b610a109190611369565b9050858111610a1f5780610a21565b855b995050505050505050505092915050565b60008073__$a2c259faa3a71ee8e08279c7fdb63b5567$__63fa5ab32e846040015185606001516040518363ffffffff1660e01b8152600401610a7692919061142d565b6040805180830381865af4158015610a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab691906115bd565b905060008482600060028110610acf57610ace6112b1565b5b60200201516006811115610ae657610ae5611282565b5b60068110610af757610af66112b1565b5b6020020135905060008583600160028110610b1557610b146112b1565b5b60200201516006811115610b2c57610b2b611282565b5b60068110610b3d57610b3c6112b1565b5b6020020135905060008660036006811115610b5b57610b5a611282565b5b60068110610b6c57610b6b6112b1565b5b6020020135905060008760046006811115610b8a57610b89611282565b5b60068110610b9b57610b9a6112b1565b5b60200201359050600283610baf919061130f565b600485610bbc919061130f565b600883610bc9919061130f565b600a85610bd6919061130f565b610be09190611369565b610bea9190611369565b610bf49190611369565b9550505050505092915050565b60008073__$a2c259faa3a71ee8e08279c7fdb63b5567$__63fa5ab32e846040015185606001516040518363ffffffff1660e01b8152600401610c4592919061142d565b6040805180830381865af4158015610c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8591906115bd565b905060008482600060028110610c9e57610c9d6112b1565b5b60200201516006811115610cb557610cb4611282565b5b60068110610cc657610cc56112b1565b5b6020020135905060008583600160028110610ce457610ce36112b1565b5b60200201516006811115610cfb57610cfa611282565b5b60068110610d0c57610d0b6112b1565b5b6020020135905060008660006006811115610d2a57610d29611282565b5b60068110610d3b57610d3a6112b1565b5b6020020135905060008760016006811115610d5957610d58611282565b5b60068110610d6a57610d696112b1565b5b60200201359050600283610d7e919061130f565b600485610d8b919061130f565b600883610d98919061130f565b600a85610da5919061130f565b610daf9190611369565b610db99190611369565b610dc39190611369565b9550505050505092915050565b60008073__$a2c259faa3a71ee8e08279c7fdb63b5567$__63fa5ab32e846040015185606001516040518363ffffffff1660e01b8152600401610e1492919061142d565b6040805180830381865af4158015610e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5491906115bd565b9050600060016006811115610e6c57610e6b611282565b5b82600060028110610e8057610e7f6112b1565b5b60200201516006811115610e9757610e96611282565b5b14610eef5760016006811115610eb057610eaf611282565b5b82600160028110610ec457610ec36112b1565b5b60200201516006811115610edb57610eda611282565b5b14610ee7576005610eea565b600a5b610ef2565b60145b60ff169050600060056006811115610f0d57610f0c611282565b5b83600160028110610f2157610f206112b1565b5b60200201516006811115610f3857610f37611282565b5b14610f4457600a610f47565b60195b60ff16905060008183610f5a9190611369565b9050600060016006811115610f7257610f71611282565b5b85600060028110610f8657610f856112b1565b5b60200201516006811115610f9d57610f9c611282565b5b14610ff55760016006811115610fb657610fb5611282565b5b85600160028110610fca57610fc96112b1565b5b60200201516006811115610fe157610fe0611282565b5b14610fed576000610ff0565b60035b610ff8565b60055b60ff16905060006005600681111561101357611012611282565b5b86600160028110611027576110266112b1565b5b6020020151600681111561103e5761103d611282565b5b1461104a57600061104d565b60075b60ff1690506000896001600681111561106957611068611282565b5b6006811061107a576110796112b1565b5b6020020135905060008a6005600681111561109857611097611282565b5b600681106110a9576110a86112b1565b5b60200201359050600084846008856110c19190611619565b6004856110ce9190611619565b6110d89190611369565b6110e29190611369565b6110ec9190611369565b90508581116110fb57806110fd565b855b995050505050505050505092915050565b6040518060c0016040528060008152602001600081526020016000600581111561113b5761113a611282565b5b81526020016000600e81111561115457611153611282565b5b815260200161116161116e565b8152602001600081525090565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050826020600602820111156111b8576111b7611197565b5b92915050565b6000819050826020600702820111156111da576111d9611197565b5b92915050565b6000806101a083850312156111f8576111f7611192565b5b60006112068582860161119c565b92505060c0611217858286016111be565b9150509250929050565b6000819050919050565b61123481611221565b82525050565b600060208201905061124f600083018461122b565b92915050565b600060c0828403121561126b5761126a611192565b5b60006112798482850161119c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061131a82611221565b915061132583611221565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561135e5761135d6112e0565b5b828202905092915050565b600061137482611221565b915061137f83611221565b9250828201905080821115611397576113966112e0565b5b92915050565b600681106113ae576113ad611282565b5b50565b60008190506113bf8261139d565b919050565b60006113cf826113b1565b9050919050565b6113df816113c4565b82525050565b600f81106113f6576113f5611282565b5b50565b6000819050611407826113e5565b919050565b6000611417826113f9565b9050919050565b6114278161140c565b82525050565b600060408201905061144260008301856113d6565b61144f602083018461141e565b9392505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6114a48261145b565b810181811067ffffffffffffffff821117156114c3576114c261146c565b5b80604052505050565b60006114d6611188565b90506114e2828261149b565b919050565b600067ffffffffffffffff8211156115025761150161146c565b5b602082029050919050565b6007811061151a57600080fd5b50565b60008151905061152c8161150d565b92915050565b6000611545611540846114e7565b6114cc565b9050806020840283018581111561155f5761155e611197565b5b835b818110156115885780611574888261151d565b845260208401935050602081019050611561565b5050509392505050565b600082601f8301126115a7576115a6611456565b5b60026115b4848285611532565b91505092915050565b6000604082840312156115d3576115d2611192565b5b60006115e184828501611592565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061162482611221565b915061162f83611221565b92508261163f5761163e6115ea565b5b82820490509291505056fea264697066735822122029d0e6f402b89853b2659c125e93f7b8a9b1c3c6ad4a574d8c2e4ea20212953164736f6c63430008100033",
  "libraries": {
    "ClassLibrary": "0xF60be104fB98bDC81E3B0B9525C715a041f60c91"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}