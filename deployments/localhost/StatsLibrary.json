{
  "address": "0x7Ace3B61664b992ae7a1122620fD0dEF85a6857c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[6]",
          "name": "stats",
          "type": "uint256[6]"
        },
        {
          "internalType": "uint256[7]",
          "name": "attributes",
          "type": "uint256[7]"
        }
      ],
      "name": "calculateMagicDamage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[6]",
          "name": "stats",
          "type": "uint256[6]"
        },
        {
          "internalType": "uint256[7]",
          "name": "attributes",
          "type": "uint256[7]"
        }
      ],
      "name": "calculateMagicDefense",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[6]",
          "name": "stats",
          "type": "uint256[6]"
        },
        {
          "internalType": "uint256[7]",
          "name": "attributes",
          "type": "uint256[7]"
        }
      ],
      "name": "calculatePhysicalDamage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[6]",
          "name": "stats",
          "type": "uint256[6]"
        },
        {
          "internalType": "uint256[7]",
          "name": "attributes",
          "type": "uint256[7]"
        }
      ],
      "name": "calculatePhysicalDefense",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x665d3520589ad9557cafe98340e2054b6670d328d6f8f700c0287ab25caade20",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x7Ace3B61664b992ae7a1122620fD0dEF85a6857c",
    "transactionIndex": 0,
    "gasUsed": "1024940",
    "logsBloom": "0x
    "blockHash": "0xe3a4f9c0ce2c840e2e85d20c631eaf86ec2bbdb1d81b4c59ab5ef0353f0e7ab2",
    "transactionHash": "0x665d3520589ad9557cafe98340e2054b6670d328d6f8f700c0287ab25caade20",
    "logs": [],
    "blockNumber": 8222758,
    "cumulativeGasUsed": "1024940",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f51cf4fddb31e9227b5ff158431bd333",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"stats\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256[7]\",\"name\":\"attributes\",\"type\":\"uint256[7]\"}],\"name\":\"calculateMagicDamage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"stats\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256[7]\",\"name\":\"attributes\",\"type\":\"uint256[7]\"}],\"name\":\"calculateMagicDefense\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"stats\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256[7]\",\"name\":\"attributes\",\"type\":\"uint256[7]\"}],\"name\":\"calculatePhysicalDamage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"stats\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256[7]\",\"name\":\"attributes\",\"type\":\"uint256[7]\"}],\"name\":\"calculatePhysicalDefense\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/Stats.sol\":\"StatsLibrary\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/libraries/Class.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\nimport {StatsLibrary} from \\\"./Stats.sol\\\";\\n\\nlibrary ClassLibrary {\\n    enum PrimaryClass {\\n        Warrior,\\n        Mage,\\n        Rogue,\\n        Guardian,\\n        Enchanter,\\n        None\\n    }\\n\\n    enum SecondaryClass {\\n        Reaper,\\n        Duelist,\\n        Harlequin,\\n        Arcanist,\\n        Battlemage,\\n        Dreamweaver,\\n        Stalker,\\n        Trickster,\\n        Explorer,\\n        Titan,\\n        Spellbreaker,\\n        Hexer,\\n        Voidwalker,\\n        Prophet,\\n        None\\n    }\\n\\n    function getOptions(\\n        PrimaryClass primary\\n    ) public pure returns (uint256[3] memory) {\\n        uint256[3][5] memory options = [\\n            [\\n                uint256(SecondaryClass.Reaper),\\n                uint256(SecondaryClass.Duelist),\\n                uint256(SecondaryClass.Harlequin)\\n            ],\\n            [\\n                uint256(SecondaryClass.Arcanist),\\n                uint256(SecondaryClass.Battlemage),\\n                uint256(SecondaryClass.Dreamweaver)\\n            ],\\n            [\\n                uint256(SecondaryClass.Stalker),\\n                uint256(SecondaryClass.Trickster),\\n                uint256(SecondaryClass.Explorer)\\n            ],\\n            [\\n                uint256(SecondaryClass.Titan),\\n                uint256(SecondaryClass.Spellbreaker),\\n                uint256(SecondaryClass.None)\\n            ],\\n            [\\n                uint256(SecondaryClass.Hexer),\\n                uint256(SecondaryClass.Voidwalker),\\n                uint256(SecondaryClass.Prophet)\\n            ]\\n        ];\\n\\n        return options[uint256(primary)];\\n    }\\n\\n    function getMarkers(\\n        PrimaryClass primary,\\n        SecondaryClass secondary\\n    ) public pure returns (StatsLibrary.Stats[2] memory) {\\n        if (primary == PrimaryClass.None) {\\n            return [StatsLibrary.Stats.VOID, StatsLibrary.Stats.VOID];\\n        }\\n\\n        StatsLibrary.Stats[5] memory primaryMarkers;\\n        primaryMarkers[uint256(PrimaryClass.Warrior)] = StatsLibrary\\n            .Stats\\n            .STRENGTH;\\n        primaryMarkers[uint256(PrimaryClass.Mage)] = StatsLibrary\\n            .Stats\\n            .INTELLECT;\\n        primaryMarkers[uint256(PrimaryClass.Rogue)] = StatsLibrary\\n            .Stats\\n            .DEXTERTY;\\n        primaryMarkers[uint256(PrimaryClass.Guardian)] = StatsLibrary\\n            .Stats\\n            .CONSTITUTION;\\n        primaryMarkers[uint256(PrimaryClass.Enchanter)] = StatsLibrary\\n            .Stats\\n            .WIT;\\n\\n        if (secondary == SecondaryClass.None) {\\n            return [primaryMarkers[uint256(primary)], StatsLibrary.Stats.VOID];\\n        }\\n\\n        StatsLibrary.Stats[14] memory secondaryMarkers;\\n\\n        // Warrior\\n        secondaryMarkers[uint256(SecondaryClass.Reaper)] = StatsLibrary\\n            .Stats\\n            .DEXTERTY;\\n        secondaryMarkers[uint256(SecondaryClass.Duelist)] = StatsLibrary\\n            .Stats\\n            .CONSTITUTION;\\n        secondaryMarkers[uint256(SecondaryClass.Harlequin)] = StatsLibrary\\n            .Stats\\n            .LUCK;\\n\\n        // Mage\\n        secondaryMarkers[uint256(SecondaryClass.Arcanist)] = StatsLibrary\\n            .Stats\\n            .WIT;\\n        secondaryMarkers[uint256(SecondaryClass.Battlemage)] = StatsLibrary\\n            .Stats\\n            .CONSTITUTION;\\n        secondaryMarkers[uint256(SecondaryClass.Dreamweaver)] = StatsLibrary\\n            .Stats\\n            .LUCK;\\n\\n        // Rogue\\n        secondaryMarkers[uint256(SecondaryClass.Stalker)] = StatsLibrary\\n            .Stats\\n            .STRENGTH;\\n        secondaryMarkers[uint256(SecondaryClass.Trickster)] = StatsLibrary\\n            .Stats\\n            .WIT;\\n        secondaryMarkers[uint256(SecondaryClass.Explorer)] = StatsLibrary\\n            .Stats\\n            .LUCK;\\n\\n        // Guardian\\n        secondaryMarkers[uint256(SecondaryClass.Titan)] = StatsLibrary\\n            .Stats\\n            .STRENGTH;\\n        secondaryMarkers[uint256(SecondaryClass.Spellbreaker)] = StatsLibrary\\n            .Stats\\n            .INTELLECT;\\n\\n        // Enchanter\\n        secondaryMarkers[uint256(SecondaryClass.Hexer)] = StatsLibrary\\n            .Stats\\n            .STRENGTH;\\n        secondaryMarkers[uint256(SecondaryClass.Voidwalker)] = StatsLibrary\\n            .Stats\\n            .INTELLECT;\\n        secondaryMarkers[uint256(SecondaryClass.Prophet)] = StatsLibrary\\n            .Stats\\n            .LUCK;\\n\\n        return [\\n            primaryMarkers[uint256(primary)],\\n            secondaryMarkers[uint256(secondary)]\\n        ];\\n    }\\n}\\n\",\"keccak256\":\"0x59a54841a5d7b05a9c363d87224d846e7df7eda6ca60174f7952e3df372dff45\",\"license\":\"MIT\"},\"contracts/libraries/Stats.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity ^0.8.16;\\nimport {ClassLibrary} from \\\"./Class.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary StatsLibrary {\\n    using SafeMath for uint256;\\n\\n    enum Stats {\\n        STRENGTH,\\n        DEXTERTY,\\n        CONSTITUTION,\\n        INTELLECT,\\n        WIT,\\n        LUCK,\\n        VOID\\n    }\\n\\n    struct Location {\\n        uint256 x;\\n        uint256 y;\\n    }\\n\\n    struct Attributes {\\n        uint256 level;\\n        uint256 experience;\\n        ClassLibrary.PrimaryClass primaryClass;\\n        ClassLibrary.SecondaryClass secondaryClass;\\n        Location location;\\n        uint256 speed;\\n    }\\n\\n    function calculateXPForNextLevel(\\n        uint256 currentLevel\\n    ) internal pure returns (uint256) {\\n        uint256 nextLevel = currentLevel + 1;\\n        return nextLevel.mul(nextLevel).mul(3).add(100);\\n    }\\n\\n    function calculatePhysicalDamage(\\n        uint256[6] calldata stats,\\n        Attributes memory attributes\\n    ) internal pure returns (uint256) {\\n        Stats[2] memory markers = ClassLibrary.getMarkers(\\n            attributes.primaryClass,\\n            attributes.secondaryClass\\n        );\\n\\n        uint256 strength = stats[uint256(Stats.STRENGTH)];\\n\\n        uint256 primaryStatMultiplier = markers[0] == Stats.STRENGTH ? 3 : 1;\\n        uint256 secondaryStatMultiplier = markers[1] == Stats.STRENGTH ? 2 : 1;\\n\\n        uint256 a = strength.mul(primaryStatMultiplier);\\n        uint256 b = strength.mul(secondaryStatMultiplier);\\n\\n        return (strength.mul(attributes.level)).add(a).add(b);\\n    }\\n\\n    function calculatePhysicalDamage(\\n        uint256[6] calldata stats,\\n        uint[7] calldata attributes\\n    ) external pure returns (uint256) {\\n        Attributes memory attributesStruct = attributesArrToStruct(attributes);\\n\\n        return calculatePhysicalDamage(stats, attributesStruct);\\n    }\\n\\n    function calculateMagicDamage(\\n        uint256[6] calldata stats,\\n        Attributes memory attributes\\n    ) internal pure returns (uint256) {\\n        Stats[2] memory markers = ClassLibrary.getMarkers(\\n            attributes.primaryClass,\\n            attributes.secondaryClass\\n        );\\n\\n        uint256 intellect = stats[uint256(Stats.INTELLECT)];\\n\\n        uint256 primaryStatMultiplier = markers[0] == Stats.INTELLECT ? 3 : 1;\\n        uint256 secondaryStatMultiplier = markers[1] == Stats.INTELLECT ? 2 : 1;\\n\\n        uint256 a = intellect.mul(primaryStatMultiplier);\\n        uint256 b = intellect.mul(secondaryStatMultiplier);\\n\\n        return (intellect.mul(attributes.level)).add(a).add(b);\\n    }\\n\\n    function calculateMagicDamage(\\n        uint256[6] calldata stats,\\n        uint[7] calldata attributes\\n    ) external pure returns (uint256) {\\n        Attributes memory attributesStruct = attributesArrToStruct(attributes);\\n\\n        return calculateMagicDamage(stats, attributesStruct);\\n    }\\n\\n    function calculatePhysicalDefense(\\n        uint256[6] calldata stats,\\n        Attributes memory attributes\\n    ) internal pure returns (uint256) {\\n        Stats[2] memory markers = ClassLibrary.getMarkers(\\n            attributes.primaryClass,\\n            attributes.secondaryClass\\n        );\\n\\n        uint256 strength = stats[uint256(Stats.STRENGTH)];\\n        uint256 constitution = stats[uint256(Stats.CONSTITUTION)];\\n\\n        uint256 conMultiplier = markers[0] == Stats.CONSTITUTION\\n            ? 4\\n            : markers[1] == Stats.CONSTITUTION\\n            ? 2\\n            : 1;\\n\\n        uint256 strMultiplier = markers[0] == Stats.STRENGTH\\n            ? 2\\n            : markers[1] == Stats.STRENGTH\\n            ? 1\\n            : 0;\\n\\n        uint256 a = strength.mul(strMultiplier);\\n        uint256 b = constitution.mul(conMultiplier);\\n\\n        return\\n            ((strength.div(4).add(constitution)).mul(attributes.level))\\n                .add(a)\\n                .add(b);\\n    }\\n\\n    function calculatePhysicalDefense(\\n        uint256[6] calldata stats,\\n        uint[7] calldata attributes\\n    ) external pure returns (uint256) {\\n        Attributes memory attributesStruct = attributesArrToStruct(attributes);\\n\\n        return calculatePhysicalDefense(stats, attributesStruct);\\n    }\\n\\n    function calculateMagicDefense(\\n        uint256[6] calldata stats,\\n        Attributes memory attributes\\n    ) internal pure returns (uint256) {\\n        Stats[2] memory markers = ClassLibrary.getMarkers(\\n            attributes.primaryClass,\\n            attributes.secondaryClass\\n        );\\n\\n        uint256 intellect = stats[uint256(Stats.INTELLECT)];\\n        uint256 constitution = stats[uint256(Stats.CONSTITUTION)];\\n\\n        uint256 conMultiplier = markers[0] == Stats.CONSTITUTION\\n            ? 4\\n            : markers[1] == Stats.CONSTITUTION\\n            ? 2\\n            : 1;\\n\\n        uint256 strMultiplier = markers[0] == Stats.INTELLECT\\n            ? 2\\n            : markers[1] == Stats.INTELLECT\\n            ? 1\\n            : 0;\\n\\n        uint256 a = intellect.mul(strMultiplier);\\n        uint256 b = constitution.mul(conMultiplier);\\n\\n        return\\n            ((intellect.div(4).add(constitution)).mul(attributes.level))\\n                .add(a)\\n                .add(b);\\n    }\\n\\n    function calculateMagicDefense(\\n        uint256[6] calldata stats,\\n        uint[7] calldata attributes\\n    ) external pure returns (uint256) {\\n        Attributes memory attributesStruct = attributesArrToStruct(attributes);\\n\\n        return calculateMagicDefense(stats, attributesStruct);\\n    }\\n\\n    function attributesArrToStruct(\\n        uint[7] calldata attributes\\n    ) internal pure returns (Attributes memory) {\\n        Location memory location = Location(attributes[4], attributes[5]);\\n\\n        return\\n            Attributes(\\n                attributes[0],\\n                attributes[1],\\n                ClassLibrary.PrimaryClass(attributes[2]),\\n                ClassLibrary.SecondaryClass(attributes[3]),\\n                location,\\n                attributes[6]\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x1adc4c898bd629d8e47e43b86d68ca3999373ba958fe3bf3bdf156fa7f73d727\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c8063091b28401461005b5780632dff70ec1461008b57806361a6d61e146100bb57806378e11c5e146100eb575b600080fd5b61007560048036038101906100709190610d28565b61011b565b6040516100829190610d82565b60405180910390f35b6100a560048036038101906100a09190610d28565b61013c565b6040516100b29190610d82565b60405180910390f35b6100d560048036038101906100d09190610d28565b61015d565b6040516100e29190610d82565b60405180910390f35b61010560048036038101906101009190610d28565b61017e565b6040516101129190610d82565b60405180910390f35b6000806101278361019f565b905061013384826102e5565b91505092915050565b6000806101488361019f565b905061015484826105a8565b91505092915050565b6000806101698361019f565b9050610175848261077e565b91505092915050565b60008061018a8361019f565b90506101968482610952565b91505092915050565b6101a7610c56565b60006040518060400160405280846004600781106101c8576101c7610d9d565b5b60200201358152602001846005600781106101e6576101e5610d9d565b5b602002013581525090506040518060c001604052808460006007811061020f5761020e610d9d565b5b602002013581526020018460016007811061022d5761022c610d9d565b5b602002013581526020018460026007811061024b5761024a610d9d565b5b6020020135600581111561026257610261610dcc565b5b600581111561027457610273610dcc565b5b81526020018460036007811061028d5761028c610d9d565b5b6020020135600e8111156102a4576102a3610dcc565b5b600e8111156102b6576102b5610dcc565b5b8152602001828152602001846006600781106102d5576102d4610d9d565b5b6020020135815250915050919050565b60008073__$a2c259faa3a71ee8e08279c7fdb63b5567$__63fa5ab32e846040015185606001516040518363ffffffff1660e01b8152600401610329929190610e8b565b6040805180830381865af4158015610345573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610369919061101b565b90506000846003600681111561038257610381610dcc565b5b6006811061039357610392610d9d565b5b60200201359050600085600260068111156103b1576103b0610dcc565b5b600681106103c2576103c1610d9d565b5b602002013590506000600260068111156103df576103de610dcc565b5b846000600281106103f3576103f2610d9d565b5b6020020151600681111561040a57610409610dcc565b5b14610462576002600681111561042357610422610dcc565b5b8460016002811061043757610436610d9d565b5b6020020151600681111561044e5761044d610dcc565b5b1461045a57600161045d565b60025b610465565b60045b60ff1690506000600360068111156104805761047f610dcc565b5b8560006002811061049457610493610d9d565b5b602002015160068111156104ab576104aa610dcc565b5b1461050357600360068111156104c4576104c3610dcc565b5b856001600281106104d8576104d7610d9d565b5b602002015160068111156104ef576104ee610dcc565b5b146104fb5760006104fe565b60015b610506565b60025b60ff16905060006105208286610c1490919063ffffffff16565b905060006105378486610c1490919063ffffffff16565b90506105998161058b8461057d8d6000015161056f8b61056160048f610c2a90919063ffffffff16565b610c4090919063ffffffff16565b610c1490919063ffffffff16565b610c4090919063ffffffff16565b610c4090919063ffffffff16565b97505050505050505092915050565b60008073__$a2c259faa3a71ee8e08279c7fdb63b5567$__63fa5ab32e846040015185606001516040518363ffffffff1660e01b81526004016105ec929190610e8b565b6040805180830381865af4158015610608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062c919061101b565b90506000846003600681111561064557610644610dcc565b5b6006811061065657610655610d9d565b5b6020020135905060006003600681111561067357610672610dcc565b5b8360006002811061068757610686610d9d565b5b6020020151600681111561069e5761069d610dcc565b5b146106aa5760016106ad565b60035b60ff1690506000600360068111156106c8576106c7610dcc565b5b846001600281106106dc576106db610d9d565b5b602002015160068111156106f3576106f2610dcc565b5b146106ff576001610702565b60025b60ff169050600061071c8385610c1490919063ffffffff16565b905060006107338386610c1490919063ffffffff16565b905061077081610762846107548c600001518a610c1490919063ffffffff16565b610c4090919063ffffffff16565b610c4090919063ffffffff16565b965050505050505092915050565b60008073__$a2c259faa3a71ee8e08279c7fdb63b5567$__63fa5ab32e846040015185606001516040518363ffffffff1660e01b81526004016107c2929190610e8b565b6040805180830381865af41580156107de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610802919061101b565b90506000846000600681111561081b5761081a610dcc565b5b6006811061082c5761082b610d9d565b5b60200201359050600080600681111561084857610847610dcc565b5b8360006002811061085c5761085b610d9d565b5b6020020151600681111561087357610872610dcc565b5b1461087f576001610882565b60035b60ff169050600080600681111561089c5761089b610dcc565b5b846001600281106108b0576108af610d9d565b5b602002015160068111156108c7576108c6610dcc565b5b146108d35760016108d6565b60025b60ff16905060006108f08385610c1490919063ffffffff16565b905060006109078386610c1490919063ffffffff16565b905061094481610936846109288c600001518a610c1490919063ffffffff16565b610c4090919063ffffffff16565b610c4090919063ffffffff16565b965050505050505092915050565b60008073__$a2c259faa3a71ee8e08279c7fdb63b5567$__63fa5ab32e846040015185606001516040518363ffffffff1660e01b8152600401610996929190610e8b565b6040805180830381865af41580156109b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d6919061101b565b9050600084600060068111156109ef576109ee610dcc565b5b60068110610a00576109ff610d9d565b5b6020020135905060008560026006811115610a1e57610a1d610dcc565b5b60068110610a2f57610a2e610d9d565b5b60200201359050600060026006811115610a4c57610a4b610dcc565b5b84600060028110610a6057610a5f610d9d565b5b60200201516006811115610a7757610a76610dcc565b5b14610acf5760026006811115610a9057610a8f610dcc565b5b84600160028110610aa457610aa3610d9d565b5b60200201516006811115610abb57610aba610dcc565b5b14610ac7576001610aca565b60025b610ad2565b60045b60ff1690506000806006811115610aec57610aeb610dcc565b5b85600060028110610b0057610aff610d9d565b5b60200201516006811115610b1757610b16610dcc565b5b14610b6f5760006006811115610b3057610b2f610dcc565b5b85600160028110610b4457610b43610d9d565b5b60200201516006811115610b5b57610b5a610dcc565b5b14610b67576000610b6a565b60015b610b72565b60025b60ff1690506000610b8c8286610c1490919063ffffffff16565b90506000610ba38486610c1490919063ffffffff16565b9050610c0581610bf784610be98d60000151610bdb8b610bcd60048f610c2a90919063ffffffff16565b610c4090919063ffffffff16565b610c1490919063ffffffff16565b610c4090919063ffffffff16565b610c4090919063ffffffff16565b97505050505050505092915050565b60008183610c229190611077565b905092915050565b60008183610c389190611100565b905092915050565b60008183610c4e9190611131565b905092915050565b6040518060c00160405280600081526020016000815260200160006005811115610c8357610c82610dcc565b5b81526020016000600e811115610c9c57610c9b610dcc565b5b8152602001610ca9610cb6565b8152602001600081525090565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600081905082602060060282011115610d0057610cff610cdf565b5b92915050565b600081905082602060070282011115610d2257610d21610cdf565b5b92915050565b6000806101a08385031215610d4057610d3f610cda565b5b6000610d4e85828601610ce4565b92505060c0610d5f85828601610d06565b9150509250929050565b6000819050919050565b610d7c81610d69565b82525050565b6000602082019050610d976000830184610d73565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60068110610e0c57610e0b610dcc565b5b50565b6000819050610e1d82610dfb565b919050565b6000610e2d82610e0f565b9050919050565b610e3d81610e22565b82525050565b600f8110610e5457610e53610dcc565b5b50565b6000819050610e6582610e43565b919050565b6000610e7582610e57565b9050919050565b610e8581610e6a565b82525050565b6000604082019050610ea06000830185610e34565b610ead6020830184610e7c565b9392505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f0282610eb9565b810181811067ffffffffffffffff82111715610f2157610f20610eca565b5b80604052505050565b6000610f34610cd0565b9050610f408282610ef9565b919050565b600067ffffffffffffffff821115610f6057610f5f610eca565b5b602082029050919050565b60078110610f7857600080fd5b50565b600081519050610f8a81610f6b565b92915050565b6000610fa3610f9e84610f45565b610f2a565b90508060208402830185811115610fbd57610fbc610cdf565b5b835b81811015610fe65780610fd28882610f7b565b845260208401935050602081019050610fbf565b5050509392505050565b600082601f83011261100557611004610eb4565b5b6002611012848285610f90565b91505092915050565b60006040828403121561103157611030610cda565b5b600061103f84828501610ff0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061108282610d69565b915061108d83610d69565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156110c6576110c5611048565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061110b82610d69565b915061111683610d69565b925082611126576111256110d1565b5b828204905092915050565b600061113c82610d69565b915061114783610d69565b925082820190508082111561115f5761115e611048565b5b9291505056fea2646970667358221220a63a17f5b463ecdcc7cca56157267d64564528aa37a8e9940ac501a3c497db7f64736f6c63430008100033",
  "libraries": {
    "ClassLibrary": "0x1380Ba5AF0799da9eD4f1072929bdC55Cb899BD5"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}