{
  "address": "0x1380Ba5AF0799da9eD4f1072929bdC55Cb899BD5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "enum ClassLibrary.PrimaryClass",
          "name": "primary",
          "type": "ClassLibrary.PrimaryClass"
        },
        {
          "internalType": "enum ClassLibrary.SecondaryClass",
          "name": "secondary",
          "type": "ClassLibrary.SecondaryClass"
        }
      ],
      "name": "getMarkers",
      "outputs": [
        {
          "internalType": "enum StatsLibrary.Stats[2]",
          "name": "",
          "type": "StatsLibrary.Stats[2]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ClassLibrary.PrimaryClass",
          "name": "primary",
          "type": "ClassLibrary.PrimaryClass"
        }
      ],
      "name": "getOptions",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x04cf0e0d910f35f6dee40feb20b2f68cccac71265d746298829caef3683c86bd",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x1380Ba5AF0799da9eD4f1072929bdC55Cb899BD5",
    "transactionIndex": 0,
    "gasUsed": "875397",
    "logsBloom": "0x
    "blockHash": "0x9eb69208aa1492d80c6b48f18abad51d49c74735110f4895b8132d353d6960b3",
    "transactionHash": "0x04cf0e0d910f35f6dee40feb20b2f68cccac71265d746298829caef3683c86bd",
    "logs": [],
    "blockNumber": 8222757,
    "cumulativeGasUsed": "875397",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f51cf4fddb31e9227b5ff158431bd333",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum ClassLibrary.PrimaryClass\",\"name\":\"primary\",\"type\":\"ClassLibrary.PrimaryClass\"},{\"internalType\":\"enum ClassLibrary.SecondaryClass\",\"name\":\"secondary\",\"type\":\"ClassLibrary.SecondaryClass\"}],\"name\":\"getMarkers\",\"outputs\":[{\"internalType\":\"enum StatsLibrary.Stats[2]\",\"name\":\"\",\"type\":\"StatsLibrary.Stats[2]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ClassLibrary.PrimaryClass\",\"name\":\"primary\",\"type\":\"ClassLibrary.PrimaryClass\"}],\"name\":\"getOptions\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/Class.sol\":\"ClassLibrary\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/libraries/Class.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\nimport {StatsLibrary} from \\\"./Stats.sol\\\";\\n\\nlibrary ClassLibrary {\\n    enum PrimaryClass {\\n        Warrior,\\n        Mage,\\n        Rogue,\\n        Guardian,\\n        Enchanter,\\n        None\\n    }\\n\\n    enum SecondaryClass {\\n        Reaper,\\n        Duelist,\\n        Harlequin,\\n        Arcanist,\\n        Battlemage,\\n        Dreamweaver,\\n        Stalker,\\n        Trickster,\\n        Explorer,\\n        Titan,\\n        Spellbreaker,\\n        Hexer,\\n        Voidwalker,\\n        Prophet,\\n        None\\n    }\\n\\n    function getOptions(\\n        PrimaryClass primary\\n    ) public pure returns (uint256[3] memory) {\\n        uint256[3][5] memory options = [\\n            [\\n                uint256(SecondaryClass.Reaper),\\n                uint256(SecondaryClass.Duelist),\\n                uint256(SecondaryClass.Harlequin)\\n            ],\\n            [\\n                uint256(SecondaryClass.Arcanist),\\n                uint256(SecondaryClass.Battlemage),\\n                uint256(SecondaryClass.Dreamweaver)\\n            ],\\n            [\\n                uint256(SecondaryClass.Stalker),\\n                uint256(SecondaryClass.Trickster),\\n                uint256(SecondaryClass.Explorer)\\n            ],\\n            [\\n                uint256(SecondaryClass.Titan),\\n                uint256(SecondaryClass.Spellbreaker),\\n                uint256(SecondaryClass.None)\\n            ],\\n            [\\n                uint256(SecondaryClass.Hexer),\\n                uint256(SecondaryClass.Voidwalker),\\n                uint256(SecondaryClass.Prophet)\\n            ]\\n        ];\\n\\n        return options[uint256(primary)];\\n    }\\n\\n    function getMarkers(\\n        PrimaryClass primary,\\n        SecondaryClass secondary\\n    ) public pure returns (StatsLibrary.Stats[2] memory) {\\n        if (primary == PrimaryClass.None) {\\n            return [StatsLibrary.Stats.VOID, StatsLibrary.Stats.VOID];\\n        }\\n\\n        StatsLibrary.Stats[5] memory primaryMarkers;\\n        primaryMarkers[uint256(PrimaryClass.Warrior)] = StatsLibrary\\n            .Stats\\n            .STRENGTH;\\n        primaryMarkers[uint256(PrimaryClass.Mage)] = StatsLibrary\\n            .Stats\\n            .INTELLECT;\\n        primaryMarkers[uint256(PrimaryClass.Rogue)] = StatsLibrary\\n            .Stats\\n            .DEXTERTY;\\n        primaryMarkers[uint256(PrimaryClass.Guardian)] = StatsLibrary\\n            .Stats\\n            .CONSTITUTION;\\n        primaryMarkers[uint256(PrimaryClass.Enchanter)] = StatsLibrary\\n            .Stats\\n            .WIT;\\n\\n        if (secondary == SecondaryClass.None) {\\n            return [primaryMarkers[uint256(primary)], StatsLibrary.Stats.VOID];\\n        }\\n\\n        StatsLibrary.Stats[14] memory secondaryMarkers;\\n\\n        // Warrior\\n        secondaryMarkers[uint256(SecondaryClass.Reaper)] = StatsLibrary\\n            .Stats\\n            .DEXTERTY;\\n        secondaryMarkers[uint256(SecondaryClass.Duelist)] = StatsLibrary\\n            .Stats\\n            .CONSTITUTION;\\n        secondaryMarkers[uint256(SecondaryClass.Harlequin)] = StatsLibrary\\n            .Stats\\n            .LUCK;\\n\\n        // Mage\\n        secondaryMarkers[uint256(SecondaryClass.Arcanist)] = StatsLibrary\\n            .Stats\\n            .WIT;\\n        secondaryMarkers[uint256(SecondaryClass.Battlemage)] = StatsLibrary\\n            .Stats\\n            .CONSTITUTION;\\n        secondaryMarkers[uint256(SecondaryClass.Dreamweaver)] = StatsLibrary\\n            .Stats\\n            .LUCK;\\n\\n        // Rogue\\n        secondaryMarkers[uint256(SecondaryClass.Stalker)] = StatsLibrary\\n            .Stats\\n            .STRENGTH;\\n        secondaryMarkers[uint256(SecondaryClass.Trickster)] = StatsLibrary\\n            .Stats\\n            .WIT;\\n        secondaryMarkers[uint256(SecondaryClass.Explorer)] = StatsLibrary\\n            .Stats\\n            .LUCK;\\n\\n        // Guardian\\n        secondaryMarkers[uint256(SecondaryClass.Titan)] = StatsLibrary\\n            .Stats\\n            .STRENGTH;\\n        secondaryMarkers[uint256(SecondaryClass.Spellbreaker)] = StatsLibrary\\n            .Stats\\n            .INTELLECT;\\n\\n        // Enchanter\\n        secondaryMarkers[uint256(SecondaryClass.Hexer)] = StatsLibrary\\n            .Stats\\n            .STRENGTH;\\n        secondaryMarkers[uint256(SecondaryClass.Voidwalker)] = StatsLibrary\\n            .Stats\\n            .INTELLECT;\\n        secondaryMarkers[uint256(SecondaryClass.Prophet)] = StatsLibrary\\n            .Stats\\n            .LUCK;\\n\\n        return [\\n            primaryMarkers[uint256(primary)],\\n            secondaryMarkers[uint256(secondary)]\\n        ];\\n    }\\n}\\n\",\"keccak256\":\"0x59a54841a5d7b05a9c363d87224d846e7df7eda6ca60174f7952e3df372dff45\",\"license\":\"MIT\"},\"contracts/libraries/Stats.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity ^0.8.16;\\nimport {ClassLibrary} from \\\"./Class.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary StatsLibrary {\\n    using SafeMath for uint256;\\n\\n    enum Stats {\\n        STRENGTH,\\n        DEXTERTY,\\n        CONSTITUTION,\\n        INTELLECT,\\n        WIT,\\n        LUCK,\\n        VOID\\n    }\\n\\n    struct Location {\\n        uint256 x;\\n        uint256 y;\\n    }\\n\\n    struct Attributes {\\n        uint256 level;\\n        uint256 experience;\\n        ClassLibrary.PrimaryClass primaryClass;\\n        ClassLibrary.SecondaryClass secondaryClass;\\n        Location location;\\n        uint256 speed;\\n    }\\n\\n    function calculateXPForNextLevel(\\n        uint256 currentLevel\\n    ) internal pure returns (uint256) {\\n        uint256 nextLevel = currentLevel + 1;\\n        return nextLevel.mul(nextLevel).mul(3).add(100);\\n    }\\n\\n    function calculatePhysicalDamage(\\n        uint256[6] calldata stats,\\n        Attributes memory attributes\\n    ) internal pure returns (uint256) {\\n        Stats[2] memory markers = ClassLibrary.getMarkers(\\n            attributes.primaryClass,\\n            attributes.secondaryClass\\n        );\\n\\n        uint256 strength = stats[uint256(Stats.STRENGTH)];\\n\\n        uint256 primaryStatMultiplier = markers[0] == Stats.STRENGTH ? 3 : 1;\\n        uint256 secondaryStatMultiplier = markers[1] == Stats.STRENGTH ? 2 : 1;\\n\\n        uint256 a = strength.mul(primaryStatMultiplier);\\n        uint256 b = strength.mul(secondaryStatMultiplier);\\n\\n        return (strength.mul(attributes.level)).add(a).add(b);\\n    }\\n\\n    function calculatePhysicalDamage(\\n        uint256[6] calldata stats,\\n        uint[7] calldata attributes\\n    ) external pure returns (uint256) {\\n        Attributes memory attributesStruct = attributesArrToStruct(attributes);\\n\\n        return calculatePhysicalDamage(stats, attributesStruct);\\n    }\\n\\n    function calculateMagicDamage(\\n        uint256[6] calldata stats,\\n        Attributes memory attributes\\n    ) internal pure returns (uint256) {\\n        Stats[2] memory markers = ClassLibrary.getMarkers(\\n            attributes.primaryClass,\\n            attributes.secondaryClass\\n        );\\n\\n        uint256 intellect = stats[uint256(Stats.INTELLECT)];\\n\\n        uint256 primaryStatMultiplier = markers[0] == Stats.INTELLECT ? 3 : 1;\\n        uint256 secondaryStatMultiplier = markers[1] == Stats.INTELLECT ? 2 : 1;\\n\\n        uint256 a = intellect.mul(primaryStatMultiplier);\\n        uint256 b = intellect.mul(secondaryStatMultiplier);\\n\\n        return (intellect.mul(attributes.level)).add(a).add(b);\\n    }\\n\\n    function calculateMagicDamage(\\n        uint256[6] calldata stats,\\n        uint[7] calldata attributes\\n    ) external pure returns (uint256) {\\n        Attributes memory attributesStruct = attributesArrToStruct(attributes);\\n\\n        return calculateMagicDamage(stats, attributesStruct);\\n    }\\n\\n    function calculatePhysicalDefense(\\n        uint256[6] calldata stats,\\n        Attributes memory attributes\\n    ) internal pure returns (uint256) {\\n        Stats[2] memory markers = ClassLibrary.getMarkers(\\n            attributes.primaryClass,\\n            attributes.secondaryClass\\n        );\\n\\n        uint256 strength = stats[uint256(Stats.STRENGTH)];\\n        uint256 constitution = stats[uint256(Stats.CONSTITUTION)];\\n\\n        uint256 conMultiplier = markers[0] == Stats.CONSTITUTION\\n            ? 4\\n            : markers[1] == Stats.CONSTITUTION\\n            ? 2\\n            : 1;\\n\\n        uint256 strMultiplier = markers[0] == Stats.STRENGTH\\n            ? 2\\n            : markers[1] == Stats.STRENGTH\\n            ? 1\\n            : 0;\\n\\n        uint256 a = strength.mul(strMultiplier);\\n        uint256 b = constitution.mul(conMultiplier);\\n\\n        return\\n            ((strength.div(4).add(constitution)).mul(attributes.level))\\n                .add(a)\\n                .add(b);\\n    }\\n\\n    function calculatePhysicalDefense(\\n        uint256[6] calldata stats,\\n        uint[7] calldata attributes\\n    ) external pure returns (uint256) {\\n        Attributes memory attributesStruct = attributesArrToStruct(attributes);\\n\\n        return calculatePhysicalDefense(stats, attributesStruct);\\n    }\\n\\n    function calculateMagicDefense(\\n        uint256[6] calldata stats,\\n        Attributes memory attributes\\n    ) internal pure returns (uint256) {\\n        Stats[2] memory markers = ClassLibrary.getMarkers(\\n            attributes.primaryClass,\\n            attributes.secondaryClass\\n        );\\n\\n        uint256 intellect = stats[uint256(Stats.INTELLECT)];\\n        uint256 constitution = stats[uint256(Stats.CONSTITUTION)];\\n\\n        uint256 conMultiplier = markers[0] == Stats.CONSTITUTION\\n            ? 4\\n            : markers[1] == Stats.CONSTITUTION\\n            ? 2\\n            : 1;\\n\\n        uint256 strMultiplier = markers[0] == Stats.INTELLECT\\n            ? 2\\n            : markers[1] == Stats.INTELLECT\\n            ? 1\\n            : 0;\\n\\n        uint256 a = intellect.mul(strMultiplier);\\n        uint256 b = constitution.mul(conMultiplier);\\n\\n        return\\n            ((intellect.div(4).add(constitution)).mul(attributes.level))\\n                .add(a)\\n                .add(b);\\n    }\\n\\n    function calculateMagicDefense(\\n        uint256[6] calldata stats,\\n        uint[7] calldata attributes\\n    ) external pure returns (uint256) {\\n        Attributes memory attributesStruct = attributesArrToStruct(attributes);\\n\\n        return calculateMagicDefense(stats, attributesStruct);\\n    }\\n\\n    function attributesArrToStruct(\\n        uint[7] calldata attributes\\n    ) internal pure returns (Attributes memory) {\\n        Location memory location = Location(attributes[4], attributes[5]);\\n\\n        return\\n            Attributes(\\n                attributes[0],\\n                attributes[1],\\n                ClassLibrary.PrimaryClass(attributes[2]),\\n                ClassLibrary.SecondaryClass(attributes[3]),\\n                location,\\n                attributes[6]\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x1adc4c898bd629d8e47e43b86d68ca3999373ba958fe3bf3bdf156fa7f73d727\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610edf610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806359eacb0414610045578063fa5ab32e14610075575b600080fd5b61005f600480360381019061005a9190610bea565b6100a5565b60405161006c9190610ccc565b60405180910390f35b61008f600480360381019061008a9190610d0c565b6102a8565b60405161009c9190610e5f565b60405180910390f35b6100ad610b37565b60006040518060a0016040528060405180606001604052806000600e8111156100d9576100d8610d6c565b5b81526020016001600e8111156100f2576100f1610d6c565b5b81526020016002600e81111561010b5761010a610d6c565b5b815250815260200160405180606001604052806003600e81111561013257610131610d6c565b5b81526020016004600e81111561014b5761014a610d6c565b5b81526020016005600e81111561016457610163610d6c565b5b815250815260200160405180606001604052806006600e81111561018b5761018a610d6c565b5b81526020016007600e8111156101a4576101a3610d6c565b5b81526020016008600e8111156101bd576101bc610d6c565b5b815250815260200160405180606001604052806009600e8111156101e4576101e3610d6c565b5b8152602001600a600e8111156101fd576101fc610d6c565b5b8152602001600e8081111561021557610214610d6c565b5b81525081526020016040518060600160405280600b600e81111561023c5761023b610d6c565b5b8152602001600c600e81111561025557610254610d6c565b5b8152602001600d600e81111561026e5761026d610d6c565b5b81525081525090508083600581111561028a57610289610d6c565b5b6005811061029b5761029a610e7a565b5b6020020151915050919050565b6102b0610b59565b6005808111156102c3576102c2610d6c565b5b8360058111156102d6576102d5610d6c565b5b0361033f5760405180604001604052806006808111156102f9576102f8610d6c565b5b600681111561030b5761030a610d6c565b5b815260200160068081111561032357610322610d6c565b5b600681111561033557610334610d6c565b5b8152509050610b31565b610347610b7b565b6000816000600581111561035e5761035d610d6c565b5b6005811061036f5761036e610e7a565b5b6020020190600681111561038657610385610d6c565b5b9081600681111561039a57610399610d6c565b5b81525050600381600160058111156103b5576103b4610d6c565b5b600581106103c6576103c5610e7a565b5b602002019060068111156103dd576103dc610d6c565b5b908160068111156103f1576103f0610d6c565b5b815250506001816002600581111561040c5761040b610d6c565b5b6005811061041d5761041c610e7a565b5b6020020190600681111561043457610433610d6c565b5b9081600681111561044857610447610d6c565b5b815250506002816003600581111561046357610462610d6c565b5b6005811061047457610473610e7a565b5b6020020190600681111561048b5761048a610d6c565b5b9081600681111561049f5761049e610d6c565b5b81525050600481600460058111156104ba576104b9610d6c565b5b600581106104cb576104ca610e7a565b5b602002019060068111156104e2576104e1610d6c565b5b908160068111156104f6576104f5610d6c565b5b81525050600e8081111561050d5761050c610d6c565b5b83600e8111156105205761051f610d6c565b5b036105b35760405180604001604052808286600581111561054457610543610d6c565b5b6005811061055557610554610e7a565b5b6020020151600681111561056c5761056b610d6c565b5b600681111561057e5761057d610d6c565b5b815260200160068081111561059657610595610d6c565b5b60068111156105a8576105a7610d6c565b5b815250915050610b31565b6105bb610b9d565b6001816000600e8111156105d2576105d1610d6c565b5b600e81106105e3576105e2610e7a565b5b602002019060068111156105fa576105f9610d6c565b5b9081600681111561060e5761060d610d6c565b5b815250506002816001600e81111561062957610628610d6c565b5b600e811061063a57610639610e7a565b5b6020020190600681111561065157610650610d6c565b5b9081600681111561066557610664610d6c565b5b815250506005816002600e8111156106805761067f610d6c565b5b600e811061069157610690610e7a565b5b602002019060068111156106a8576106a7610d6c565b5b908160068111156106bc576106bb610d6c565b5b815250506004816003600e8111156106d7576106d6610d6c565b5b600e81106106e8576106e7610e7a565b5b602002019060068111156106ff576106fe610d6c565b5b9081600681111561071357610712610d6c565b5b815250506002816004600e81111561072e5761072d610d6c565b5b600e811061073f5761073e610e7a565b5b6020020190600681111561075657610755610d6c565b5b9081600681111561076a57610769610d6c565b5b815250506005816005600e81111561078557610784610d6c565b5b600e811061079657610795610e7a565b5b602002019060068111156107ad576107ac610d6c565b5b908160068111156107c1576107c0610d6c565b5b815250506000816006600e8111156107dc576107db610d6c565b5b600e81106107ed576107ec610e7a565b5b6020020190600681111561080457610803610d6c565b5b9081600681111561081857610817610d6c565b5b815250506004816007600e81111561083357610832610d6c565b5b600e811061084457610843610e7a565b5b6020020190600681111561085b5761085a610d6c565b5b9081600681111561086f5761086e610d6c565b5b815250506005816008600e81111561088a57610889610d6c565b5b600e811061089b5761089a610e7a565b5b602002019060068111156108b2576108b1610d6c565b5b908160068111156108c6576108c5610d6c565b5b815250506000816009600e8111156108e1576108e0610d6c565b5b600e81106108f2576108f1610e7a565b5b6020020190600681111561090957610908610d6c565b5b9081600681111561091d5761091c610d6c565b5b81525050600381600a600e81111561093857610937610d6c565b5b600e811061094957610948610e7a565b5b602002019060068111156109605761095f610d6c565b5b9081600681111561097457610973610d6c565b5b81525050600081600b600e81111561098f5761098e610d6c565b5b600e81106109a05761099f610e7a565b5b602002019060068111156109b7576109b6610d6c565b5b908160068111156109cb576109ca610d6c565b5b81525050600381600c600e8111156109e6576109e5610d6c565b5b600e81106109f7576109f6610e7a565b5b60200201906006811115610a0e57610a0d610d6c565b5b90816006811115610a2257610a21610d6c565b5b81525050600581600d600e811115610a3d57610a3c610d6c565b5b600e8110610a4e57610a4d610e7a565b5b60200201906006811115610a6557610a64610d6c565b5b90816006811115610a7957610a78610d6c565b5b81525050604051806040016040528083876005811115610a9c57610a9b610d6c565b5b60058110610aad57610aac610e7a565b5b60200201516006811115610ac457610ac3610d6c565b5b6006811115610ad657610ad5610d6c565b5b81526020018286600e811115610aef57610aee610d6c565b5b600e8110610b0057610aff610e7a565b5b60200201516006811115610b1757610b16610d6c565b5b6006811115610b2957610b28610d6c565b5b815250925050505b92915050565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6040518060a00160405280600590602082028036833780820191505090505090565b604051806101c00160405280600e90602082028036833780820191505090505090565b600080fd5b60068110610bd257600080fd5b50565b600081359050610be481610bc5565b92915050565b600060208284031215610c0057610bff610bc0565b5b6000610c0e84828501610bd5565b91505092915050565b600060039050919050565b600081905092915050565b6000819050919050565b6000819050919050565b610c4a81610c37565b82525050565b6000610c5c8383610c41565b60208301905092915050565b6000602082019050919050565b610c7e81610c17565b610c888184610c22565b9250610c9382610c2d565b8060005b83811015610cc4578151610cab8782610c50565b9650610cb683610c68565b925050600181019050610c97565b505050505050565b6000606082019050610ce16000830184610c75565b92915050565b600f8110610cf457600080fd5b50565b600081359050610d0681610ce7565b92915050565b60008060408385031215610d2357610d22610bc0565b5b6000610d3185828601610bd5565b9250506020610d4285828601610cf7565b9150509250929050565b600060029050919050565b600081905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60078110610dac57610dab610d6c565b5b50565b6000819050610dbd82610d9b565b919050565b6000610dcd82610daf565b9050919050565b610ddd81610dc2565b82525050565b6000610def8383610dd4565b60208301905092915050565b6000602082019050919050565b610e1181610d4c565b610e1b8184610d57565b9250610e2682610d62565b8060005b83811015610e57578151610e3e8782610de3565b9650610e4983610dfb565b925050600181019050610e2a565b505050505050565b6000604082019050610e746000830184610e08565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212209c923f8625df1af732c9ff6c1253ced37376737eca118683e601bcdda917400964736f6c63430008100033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806359eacb0414610045578063fa5ab32e14610075575b600080fd5b61005f600480360381019061005a9190610bea565b6100a5565b60405161006c9190610ccc565b60405180910390f35b61008f600480360381019061008a9190610d0c565b6102a8565b60405161009c9190610e5f565b60405180910390f35b6100ad610b37565b60006040518060a0016040528060405180606001604052806000600e8111156100d9576100d8610d6c565b5b81526020016001600e8111156100f2576100f1610d6c565b5b81526020016002600e81111561010b5761010a610d6c565b5b815250815260200160405180606001604052806003600e81111561013257610131610d6c565b5b81526020016004600e81111561014b5761014a610d6c565b5b81526020016005600e81111561016457610163610d6c565b5b815250815260200160405180606001604052806006600e81111561018b5761018a610d6c565b5b81526020016007600e8111156101a4576101a3610d6c565b5b81526020016008600e8111156101bd576101bc610d6c565b5b815250815260200160405180606001604052806009600e8111156101e4576101e3610d6c565b5b8152602001600a600e8111156101fd576101fc610d6c565b5b8152602001600e8081111561021557610214610d6c565b5b81525081526020016040518060600160405280600b600e81111561023c5761023b610d6c565b5b8152602001600c600e81111561025557610254610d6c565b5b8152602001600d600e81111561026e5761026d610d6c565b5b81525081525090508083600581111561028a57610289610d6c565b5b6005811061029b5761029a610e7a565b5b6020020151915050919050565b6102b0610b59565b6005808111156102c3576102c2610d6c565b5b8360058111156102d6576102d5610d6c565b5b0361033f5760405180604001604052806006808111156102f9576102f8610d6c565b5b600681111561030b5761030a610d6c565b5b815260200160068081111561032357610322610d6c565b5b600681111561033557610334610d6c565b5b8152509050610b31565b610347610b7b565b6000816000600581111561035e5761035d610d6c565b5b6005811061036f5761036e610e7a565b5b6020020190600681111561038657610385610d6c565b5b9081600681111561039a57610399610d6c565b5b81525050600381600160058111156103b5576103b4610d6c565b5b600581106103c6576103c5610e7a565b5b602002019060068111156103dd576103dc610d6c565b5b908160068111156103f1576103f0610d6c565b5b815250506001816002600581111561040c5761040b610d6c565b5b6005811061041d5761041c610e7a565b5b6020020190600681111561043457610433610d6c565b5b9081600681111561044857610447610d6c565b5b815250506002816003600581111561046357610462610d6c565b5b6005811061047457610473610e7a565b5b6020020190600681111561048b5761048a610d6c565b5b9081600681111561049f5761049e610d6c565b5b81525050600481600460058111156104ba576104b9610d6c565b5b600581106104cb576104ca610e7a565b5b602002019060068111156104e2576104e1610d6c565b5b908160068111156104f6576104f5610d6c565b5b81525050600e8081111561050d5761050c610d6c565b5b83600e8111156105205761051f610d6c565b5b036105b35760405180604001604052808286600581111561054457610543610d6c565b5b6005811061055557610554610e7a565b5b6020020151600681111561056c5761056b610d6c565b5b600681111561057e5761057d610d6c565b5b815260200160068081111561059657610595610d6c565b5b60068111156105a8576105a7610d6c565b5b815250915050610b31565b6105bb610b9d565b6001816000600e8111156105d2576105d1610d6c565b5b600e81106105e3576105e2610e7a565b5b602002019060068111156105fa576105f9610d6c565b5b9081600681111561060e5761060d610d6c565b5b815250506002816001600e81111561062957610628610d6c565b5b600e811061063a57610639610e7a565b5b6020020190600681111561065157610650610d6c565b5b9081600681111561066557610664610d6c565b5b815250506005816002600e8111156106805761067f610d6c565b5b600e811061069157610690610e7a565b5b602002019060068111156106a8576106a7610d6c565b5b908160068111156106bc576106bb610d6c565b5b815250506004816003600e8111156106d7576106d6610d6c565b5b600e81106106e8576106e7610e7a565b5b602002019060068111156106ff576106fe610d6c565b5b9081600681111561071357610712610d6c565b5b815250506002816004600e81111561072e5761072d610d6c565b5b600e811061073f5761073e610e7a565b5b6020020190600681111561075657610755610d6c565b5b9081600681111561076a57610769610d6c565b5b815250506005816005600e81111561078557610784610d6c565b5b600e811061079657610795610e7a565b5b602002019060068111156107ad576107ac610d6c565b5b908160068111156107c1576107c0610d6c565b5b815250506000816006600e8111156107dc576107db610d6c565b5b600e81106107ed576107ec610e7a565b5b6020020190600681111561080457610803610d6c565b5b9081600681111561081857610817610d6c565b5b815250506004816007600e81111561083357610832610d6c565b5b600e811061084457610843610e7a565b5b6020020190600681111561085b5761085a610d6c565b5b9081600681111561086f5761086e610d6c565b5b815250506005816008600e81111561088a57610889610d6c565b5b600e811061089b5761089a610e7a565b5b602002019060068111156108b2576108b1610d6c565b5b908160068111156108c6576108c5610d6c565b5b815250506000816009600e8111156108e1576108e0610d6c565b5b600e81106108f2576108f1610e7a565b5b6020020190600681111561090957610908610d6c565b5b9081600681111561091d5761091c610d6c565b5b81525050600381600a600e81111561093857610937610d6c565b5b600e811061094957610948610e7a565b5b602002019060068111156109605761095f610d6c565b5b9081600681111561097457610973610d6c565b5b81525050600081600b600e81111561098f5761098e610d6c565b5b600e81106109a05761099f610e7a565b5b602002019060068111156109b7576109b6610d6c565b5b908160068111156109cb576109ca610d6c565b5b81525050600381600c600e8111156109e6576109e5610d6c565b5b600e81106109f7576109f6610e7a565b5b60200201906006811115610a0e57610a0d610d6c565b5b90816006811115610a2257610a21610d6c565b5b81525050600581600d600e811115610a3d57610a3c610d6c565b5b600e8110610a4e57610a4d610e7a565b5b60200201906006811115610a6557610a64610d6c565b5b90816006811115610a7957610a78610d6c565b5b81525050604051806040016040528083876005811115610a9c57610a9b610d6c565b5b60058110610aad57610aac610e7a565b5b60200201516006811115610ac457610ac3610d6c565b5b6006811115610ad657610ad5610d6c565b5b81526020018286600e811115610aef57610aee610d6c565b5b600e8110610b0057610aff610e7a565b5b60200201516006811115610b1757610b16610d6c565b5b6006811115610b2957610b28610d6c565b5b815250925050505b92915050565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b6040518060a00160405280600590602082028036833780820191505090505090565b604051806101c00160405280600e90602082028036833780820191505090505090565b600080fd5b60068110610bd257600080fd5b50565b600081359050610be481610bc5565b92915050565b600060208284031215610c0057610bff610bc0565b5b6000610c0e84828501610bd5565b91505092915050565b600060039050919050565b600081905092915050565b6000819050919050565b6000819050919050565b610c4a81610c37565b82525050565b6000610c5c8383610c41565b60208301905092915050565b6000602082019050919050565b610c7e81610c17565b610c888184610c22565b9250610c9382610c2d565b8060005b83811015610cc4578151610cab8782610c50565b9650610cb683610c68565b925050600181019050610c97565b505050505050565b6000606082019050610ce16000830184610c75565b92915050565b600f8110610cf457600080fd5b50565b600081359050610d0681610ce7565b92915050565b60008060408385031215610d2357610d22610bc0565b5b6000610d3185828601610bd5565b9250506020610d4285828601610cf7565b9150509250929050565b600060029050919050565b600081905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60078110610dac57610dab610d6c565b5b50565b6000819050610dbd82610d9b565b919050565b6000610dcd82610daf565b9050919050565b610ddd81610dc2565b82525050565b6000610def8383610dd4565b60208301905092915050565b6000602082019050919050565b610e1181610d4c565b610e1b8184610d57565b9250610e2682610d62565b8060005b83811015610e57578151610e3e8782610de3565b9650610e4983610dfb565b925050600181019050610e2a565b505050505050565b6000604082019050610e746000830184610e08565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212209c923f8625df1af732c9ff6c1253ced37376737eca118683e601bcdda917400964736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}