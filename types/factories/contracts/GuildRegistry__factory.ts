/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  GuildRegistry,
  GuildRegistryInterface,
} from "../../contracts/GuildRegistry";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "GuildAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "GuildAlreadyRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyAllowedForGuilds",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "guild",
        type: "address",
      },
    ],
    name: "accept",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "isMember",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "guild",
        type: "address",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "candidate",
        type: "address",
      },
      {
        internalType: "address",
        name: "guild",
        type: "address",
      },
    ],
    name: "registerMember",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "s_guilds",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "s_members",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "member",
        type: "address",
      },
    ],
    name: "unregisterMember",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61131e8061010d6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80639521e619116100665780639521e619146101475780639f00592014610163578063a230c5241461017f578063f2fde38b146101af578063fc45f976146101cb5761009e565b80634420e486146100a357806345b89fb1146100bf57806365b26b5f146100ef578063715018a61461011f5780638da5cb5b14610129575b600080fd5b6100bd60048036038101906100b89190610e3d565b6101e7565b005b6100d960048036038101906100d49190610e3d565b610386565b6040516100e69190610e79565b60405180910390f35b61010960048036038101906101049190610eca565b6103b9565b6040516101169190610e79565b60405180910390f35b6101276103f8565b005b61013161040c565b60405161013e9190610e79565b60405180910390f35b610161600480360381019061015c9190610ef7565b610435565b005b61017d60048036038101906101789190610e3d565b6105ef565b005b61019960048036038101906101949190610e3d565b6108bb565b6040516101a69190610f52565b60405180910390f35b6101c960048036038101906101c49190610e3d565b610953565b005b6101e560048036038101906101e09190610e3d565b6109d6565b005b600180548060200260200160405190810160405280929190818152602001828054801561026957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161021f575b505050505073__$0127e0816bbff20e825068c1b5c01f855f$__633da80d669091836040518363ffffffff1660e01b81526004016102a892919061103a565b602060405180830381865af41580156102c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e99190611096565b15610320576040517f572d4e0800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600281815481106103c957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610400610b90565b61040a6000610c0e565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60028054806020026020016040519081016040528092919081815260200182805480156104b757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161046d575b505050505073__$0127e0816bbff20e825068c1b5c01f855f$__633da80d669091336040518363ffffffff1660e01b81526004016104f692919061103a565b602060405180830381865af4158015610513573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105379190611096565b61056d576040517f59c1e77e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6105f7610b90565b600280548060200260200160405190810160405280929190818152602001828054801561067957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161062f575b505050505073__$0127e0816bbff20e825068c1b5c01f855f$__633da80d669091836040518363ffffffff1660e01b81526004016106b892919061103a565b602060405180830381865af41580156106d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f99190611096565b15610730576040517f0611c76e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060018054806020026020016040519081016040528092919081815260200182805480156107b557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161076b575b505050505073__$0127e0816bbff20e825068c1b5c01f855f$__639fce5c8e9091856040518363ffffffff1660e01b81526004016107f492919061103a565b6040805180830381865af4158015610810573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083491906110d8565b91509150811561085357610852816001610cd290919063ffffffff16565b5b6002839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b61095b610b90565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c19061119b565b60405180910390fd5b6109d381610c0e565b50565b6002805480602002602001604051908101604052809291908181526020018280548015610a5857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610a0e575b505050505073__$0127e0816bbff20e825068c1b5c01f855f$__633da80d669091336040518363ffffffff1660e01b8152600401610a9792919061103a565b602060405180830381865af4158015610ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad89190611096565b610b0e576040517f59c1e77e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610b98610dd2565b73ffffffffffffffffffffffffffffffffffffffff16610bb661040c565b73ffffffffffffffffffffffffffffffffffffffff1614610c0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0390611207565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8180549050811015610dce578160018380549050610cf09190611256565b81548110610d0157610d0061128a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281548110610d3f57610d3e61128a565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081805480610d9857610d976112b9565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b5050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e0a82610ddf565b9050919050565b610e1a81610dff565b8114610e2557600080fd5b50565b600081359050610e3781610e11565b92915050565b600060208284031215610e5357610e52610dda565b5b6000610e6184828501610e28565b91505092915050565b610e7381610dff565b82525050565b6000602082019050610e8e6000830184610e6a565b92915050565b6000819050919050565b610ea781610e94565b8114610eb257600080fd5b50565b600081359050610ec481610e9e565b92915050565b600060208284031215610ee057610edf610dda565b5b6000610eee84828501610eb5565b91505092915050565b60008060408385031215610f0e57610f0d610dda565b5b6000610f1c85828601610e28565b9250506020610f2d85828601610e28565b9150509250929050565b60008115159050919050565b610f4c81610f37565b82525050565b6000602082019050610f676000830184610f43565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610fa281610dff565b82525050565b6000610fb48383610f99565b60208301905092915050565b6000602082019050919050565b6000610fd882610f6d565b610fe28185610f78565b9350610fed83610f89565b8060005b8381101561101e5781516110058882610fa8565b975061101083610fc0565b925050600181019050610ff1565b5085935050505092915050565b61103481610dff565b82525050565b600060408201905081810360008301526110548185610fcd565b9050611063602083018461102b565b9392505050565b61107381610f37565b811461107e57600080fd5b50565b6000815190506110908161106a565b92915050565b6000602082840312156110ac576110ab610dda565b5b60006110ba84828501611081565b91505092915050565b6000815190506110d281610e9e565b92915050565b600080604083850312156110ef576110ee610dda565b5b60006110fd85828601611081565b925050602061110e858286016110c3565b9150509250929050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611185602683611118565b915061119082611129565b604082019050919050565b600060208201905081810360008301526111b481611178565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006111f1602083611118565b91506111fc826111bb565b602082019050919050565b60006020820190508181036000830152611220816111e4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061126182610e94565b915061126c83610e94565b925082820390508181111561128457611283611227565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212204014d15490efcd57de081e58c1a8cbb81022e855265838f02fb6c4e14d1a06c064736f6c63430008100033";

type GuildRegistryConstructorParams =
  | [linkLibraryAddresses: GuildRegistryLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GuildRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class GuildRegistry__factory extends ContractFactory {
  constructor(...args: GuildRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        GuildRegistry__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: GuildRegistryLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$0127e0816bbff20e825068c1b5c01f855f\\$__", "g"),
      linkLibraryAddresses[
        "contracts/libraries/ArrayUtils.sol:AddressArrayUtils"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GuildRegistry> {
    return super.deploy(overrides || {}) as Promise<GuildRegistry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GuildRegistry {
    return super.attach(address) as GuildRegistry;
  }
  override connect(signer: Signer): GuildRegistry__factory {
    return super.connect(signer) as GuildRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GuildRegistryInterface {
    return new utils.Interface(_abi) as GuildRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GuildRegistry {
    return new Contract(address, _abi, signerOrProvider) as GuildRegistry;
  }
}

export interface GuildRegistryLibraryAddresses {
  ["contracts/libraries/ArrayUtils.sol:AddressArrayUtils"]: string;
}
