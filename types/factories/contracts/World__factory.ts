/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { World, WorldInterface } from "../../contracts/World";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "NotInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "Unauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract Player",
        name: "player",
        type: "address",
      },
      {
        internalType: "contract ISuperToken",
        name: "mana",
        type: "address",
      },
      {
        internalType: "contract ManaReserve",
        name: "manaReserve",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405260008060146101000a81548160ff02191690831515021790555034801561002a57600080fd5b5061004761003c61004c60201b60201c565b61005460201b60201c565b610118565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610797806101276000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063715018a6146100515780638da5cb5b1461005b578063c0c53b8b14610079578063f2fde38b14610095575b600080fd5b6100596100b1565b005b6100636100c5565b6040516100709190610452565b60405180910390f35b610093600480360381019061008e919061052c565b6100ee565b005b6100af60048036038101906100aa91906105ab565b610244565b005b6100b96102c7565b6100c36000610345565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6100f66102c7565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1663192eb652836040518263ffffffff1660e01b81526004016101f29190610637565b600060405180830381600087803b15801561020c57600080fd5b505af1158015610220573d6000803e3d6000fd5b505050506001600060146101000a81548160ff021916908315150217905550505050565b61024c6102c7565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036102bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b2906106d5565b60405180910390fd5b6102c481610345565b50565b6102cf610409565b73ffffffffffffffffffffffffffffffffffffffff166102ed6100c5565b73ffffffffffffffffffffffffffffffffffffffff1614610343576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033a90610741565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061043c82610411565b9050919050565b61044c81610431565b82525050565b60006020820190506104676000830184610443565b92915050565b600080fd5b600061047d82610431565b9050919050565b61048d81610472565b811461049857600080fd5b50565b6000813590506104aa81610484565b92915050565b60006104bb82610431565b9050919050565b6104cb816104b0565b81146104d657600080fd5b50565b6000813590506104e8816104c2565b92915050565b60006104f982610431565b9050919050565b610509816104ee565b811461051457600080fd5b50565b60008135905061052681610500565b92915050565b6000806000606084860312156105455761054461046d565b5b60006105538682870161049b565b9350506020610564868287016104d9565b925050604061057586828701610517565b9150509250925092565b61058881610431565b811461059357600080fd5b50565b6000813590506105a58161057f565b92915050565b6000602082840312156105c1576105c061046d565b5b60006105cf84828501610596565b91505092915050565b6000819050919050565b60006105fd6105f86105f384610411565b6105d8565b610411565b9050919050565b600061060f826105e2565b9050919050565b600061062182610604565b9050919050565b61063181610616565b82525050565b600060208201905061064c6000830184610628565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006106bf602683610652565b91506106ca82610663565b604082019050919050565b600060208201905081810360008301526106ee816106b2565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061072b602083610652565b9150610736826106f5565b602082019050919050565b6000602082019050818103600083015261075a8161071e565b905091905056fea26469706673582212203bf65d2b7ea54ba03d2e7a518eeb1341edc6b8e7534d7fb226741eb68e50e9fb64736f6c63430008110033";

type WorldConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WorldConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class World__factory extends ContractFactory {
  constructor(...args: WorldConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<World> {
    return super.deploy(overrides || {}) as Promise<World>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): World {
    return super.attach(address) as World;
  }
  override connect(signer: Signer): World__factory {
    return super.connect(signer) as World__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WorldInterface {
    return new utils.Interface(_abi) as WorldInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): World {
    return new Contract(address, _abi, signerOrProvider) as World;
  }
}
