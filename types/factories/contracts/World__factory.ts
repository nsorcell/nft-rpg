/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { World, WorldInterface } from "../../contracts/World";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "NotInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "Unauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract Player",
        name: "player",
        type: "address",
      },
      {
        internalType: "contract ISuperToken",
        name: "mana",
        type: "address",
      },
      {
        internalType: "contract ManaReserve",
        name: "manaReserve",
        type: "address",
      },
      {
        internalType: "contract GuildRegistry",
        name: "guildRegistry",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405260008060146101000a81548160ff02191690831515021790555034801561002a57600080fd5b5061004761003c61004c60201b60201c565b61005460201b60201c565b610118565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61082b806101276000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063715018a6146100515780638da5cb5b1461005b578063f2fde38b14610079578063f8c8765e14610095575b600080fd5b6100596100b1565b005b6100636100c5565b6040516100709190610494565b60405180910390f35b610093600480360381019061008e91906104e0565b6100ee565b005b6100af60048036038101906100aa9190610605565b610171565b005b6100b9610309565b6100c36000610387565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6100f6610309565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610165576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015c906106ef565b60405180910390fd5b61016e81610387565b50565b610179610309565b83600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff1663192eb652846040518263ffffffff1660e01b81526004016102b6919061076e565b600060405180830381600087803b1580156102d057600080fd5b505af11580156102e4573d6000803e3d6000fd5b505050506001600060146101000a81548160ff02191690831515021790555050505050565b61031161044b565b73ffffffffffffffffffffffffffffffffffffffff1661032f6100c5565b73ffffffffffffffffffffffffffffffffffffffff1614610385576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037c906107d5565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061047e82610453565b9050919050565b61048e81610473565b82525050565b60006020820190506104a96000830184610485565b92915050565b600080fd5b6104bd81610473565b81146104c857600080fd5b50565b6000813590506104da816104b4565b92915050565b6000602082840312156104f6576104f56104af565b5b6000610504848285016104cb565b91505092915050565b600061051882610473565b9050919050565b6105288161050d565b811461053357600080fd5b50565b6000813590506105458161051f565b92915050565b600061055682610473565b9050919050565b6105668161054b565b811461057157600080fd5b50565b6000813590506105838161055d565b92915050565b600061059482610473565b9050919050565b6105a481610589565b81146105af57600080fd5b50565b6000813590506105c18161059b565b92915050565b60006105d282610473565b9050919050565b6105e2816105c7565b81146105ed57600080fd5b50565b6000813590506105ff816105d9565b92915050565b6000806000806080858703121561061f5761061e6104af565b5b600061062d87828801610536565b945050602061063e87828801610574565b935050604061064f878288016105b2565b9250506060610660878288016105f0565b91505092959194509250565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006106d960268361066c565b91506106e48261067d565b604082019050919050565b60006020820190508181036000830152610708816106cc565b9050919050565b6000819050919050565b600061073461072f61072a84610453565b61070f565b610453565b9050919050565b600061074682610719565b9050919050565b60006107588261073b565b9050919050565b6107688161074d565b82525050565b6000602082019050610783600083018461075f565b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006107bf60208361066c565b91506107ca82610789565b602082019050919050565b600060208201905081810360008301526107ee816107b2565b905091905056fea2646970667358221220cba6538fa21a85871a42db3613b030fc203f46d72649d071923f87f7c1d0902964736f6c63430008100033";

type WorldConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WorldConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class World__factory extends ContractFactory {
  constructor(...args: WorldConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<World> {
    return super.deploy(overrides || {}) as Promise<World>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): World {
    return super.attach(address) as World;
  }
  override connect(signer: Signer): World__factory {
    return super.connect(signer) as World__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WorldInterface {
    return new utils.Interface(_abi) as WorldInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): World {
    return new Contract(address, _abi, signerOrProvider) as World;
  }
}
